#version 450

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable

layout (binding = 0, rgba16f) readonly uniform image2D src_image;
layout (binding = 1) writeonly uniform image2D dest_image;
layout (binding = 2, rgba16f) readonly uniform image2D bloom_image;
layout (binding = 3, r8ui) readonly uniform uimage2D bilateral_weight;

layout(local_size_x = 16, local_size_y = 16 ) in;

#include <gct/gamma.h>

void main() {
  const ivec2 screen_pos = ivec2( gl_GlobalInvocationID.xy );
  const ivec2 src_image_size = imageSize( src_image );
  const ivec2 dest_image_size = imageSize( dest_image );
  const ivec2 bloom_image_size = imageSize( bloom_image );
  const vec2 src_scale = vec2( src_image_size )/vec2( dest_image_size );
  const vec2 src_texcoord = vec2( screen_pos ) * src_scale;
  const ivec2 src_pos = ivec2( src_texcoord );
  const vec2 src_offset = src_texcoord - src_pos;
  const vec2 bloom_scale = vec2( bloom_image_size )/vec2( dest_image_size );
  const vec2 bloom_texcoord = vec2( screen_pos ) * bloom_scale;
  const ivec2 bloom_pos = ivec2( bloom_texcoord );
  const vec2 bloom_offset = bloom_texcoord - bloom_pos;
  /*vec4 linear = mix(
    mix(
      imageLoad( src_image, src_pos ),
      imageLoad( src_image, src_pos + ivec2( 1, 0 ) ),
      src_offset.x
    ),
    mix(
      imageLoad( src_image, src_pos + ivec2( 0, 1 ) ),
      imageLoad( src_image, src_pos + ivec2( 1, 1 ) ),
      src_offset.x
    ),
    src_offset.y
  );*/
  const vec3 bloom = mix(
    mix(
      imageLoad( bloom_image, bloom_pos ).xyz,
      imageLoad( bloom_image, bloom_pos + ivec2( 1, 0 ) ).xyz,
      bloom_offset.x
    ),
    mix(
      imageLoad( bloom_image, bloom_pos + ivec2( 0, 1 ) ).xyz,
      imageLoad( bloom_image, bloom_pos + ivec2( 1, 1 ) ).xyz,
      bloom_offset.x
    ),
    bloom_offset.y
  );
  const uint bw = imageLoad( bilateral_weight, src_pos ).x;
  vec4 linear;
  /*if( src_offset.x != 0 && src_offset.y == 0 ) {
    if( ( ( bw >> 5 ) & 0x3 ) != 2 ) linear = vec4( 1.0, 0.0, 0.0, 1.0 );
  }
  if( src_offset.x == 0 && src_offset.y != 0 ) {
    if( ( ( bw >> 3 ) & 0x3 ) != 2 ) linear = vec4( 0.0, 1.0, 0.0, 1.0 );
  }
  if( src_offset.x != 0 && src_offset.y != 0 ) {
    if( ( ( bw >> 0 ) & 0x7 ) != 4 ) linear = vec4( 0.0, 0.0, 1.0, 1.0 );
  }*/
  const vec4 p0 = imageLoad( src_image, src_pos );
  const vec4 p1 = imageLoad( src_image, src_pos + ivec2( 1, 0 ) );
  const vec4 p2 = imageLoad( src_image, src_pos + ivec2( 0, 1 ) );
  const vec4 p3 = imageLoad( src_image, src_pos + ivec2( 1, 1 ) );
  if( src_offset.x != 0 && src_offset.y == 0 ) {
    if( ( ( bw >> 5 ) & 0x3 ) == 0  ) {
      linear = vec4( 1.0, 0.0, 1.0, 1.0 );
    }
    else if( ( ( bw >> 5 ) & 0x3 ) == 1 ) {
      linear = vec4( 1.0, 0.0, 1.0, 1.0 );
    }
    else {
      linear = ( p0 + p1 ) * 0.5;
    }
  }
  else if( src_offset.x == 0 && src_offset.y != 0 ) {
    if( ( ( bw >> 3 ) & 0x3 ) == 0  ) {
      linear = vec4( 1.0, 0.0, 1.0, 1.0 );
    }
    else if( ( ( bw >> 3 ) & 0x3 ) == 1 ) {
      linear = vec4( 1.0, 0.0, 1.0, 1.0 );
    }
    else {
      linear = ( p0 + p2 ) * 0.5;
    }
  }
  else if( src_offset.x != 0 && src_offset.y != 0 ) {
    if( ( bw & 0x7 ) == 0 ) {
      linear = vec4( 1.0, 0.0, 1.0, 1.0 );
    }
    else if( ( bw & 0x7 ) == 1 ) {
      linear = vec4( 1.0, 0.0, 1.0, 1.0 );
    }
    else if( ( bw & 0x7 ) == 2 ) {
      linear = vec4( 1.0, 0.0, 1.0, 1.0 );
    }
    else if( ( bw & 0x7 ) == 3 ) {
      linear = vec4( 1.0, 0.0, 1.0, 1.0 );
    }
    else {
      linear = ( p0 + p1 + p2 + p3 ) * 0.25;
    }
  }
  else {
    linear = p0;
  }
  imageStore( dest_image, screen_pos, vec4( gamma( min( max( xyz_to_bt709 * ( linear.rgb + bloom ), vec3( 0.0, 0.0, 0.0 ) ), vec3( 1.0, 1.0, 1.0 ) ) ), linear.a ) );
}

