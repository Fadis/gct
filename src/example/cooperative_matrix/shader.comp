#version 450

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_arithmetic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#extension GL_NV_cooperative_matrix : enable

layout(local_size_x = 1, local_size_y = 1, local_Size_z = 32 ) in;
layout(std430, binding = 0) buffer a {
  float16_t data_a[];
};
layout(std430, binding = 1) buffer b {
  float16_t data_b[];
};
layout(std430, binding = 2) buffer c {
  float16_t data_c[];
};
layout(std430, binding = 3) buffer d {
  float16_t data_d[];
};

layout(constant_id = 1) const uint m = 32;
layout(constant_id = 2) const uint n = 32;
layout(constant_id = 3) const uint k = 32;

uint coord_to_offset(uint i, uint j, uint stride, bool col_major) {
  return col_major ? ( stride * j + i ) : ( stride * i + j );
}

void main() {
  const uint x = gl_GlobalInvocationID.x;
  const uint y = gl_GlobalInvocationID.y;
  const uint width = gl_WorkGroupSize.x * gl_NumWorkGroups.x;
  const uint index = x + y * width;
  fcoopmatNV<16, gl_ScopeSubgroup, 16, 8> mat_a;
  fcoopmatNV<16, gl_ScopeSubgroup, 8, 16> mat_b;
  fcoopmatNV<16, gl_ScopeSubgroup, 8, 8> mat_c;
  for( uint i = 0; i != mat_c.length(); i++ ) {
    mat_c[ i ] = float16_t( 0.0 );
  }

  const uint stride_a = m;
  const uint stride_b = k;
  const uint stride_c = k;

  for( uint i = 0; i != k/8; i++ ) {
    coopMatLoadNV( mat_a, data_a, coord_to_offset( 0/*x * 8*/, i * 8, stride_a, false ), stride_a, false );
    coopMatLoadNV( mat_b, data_b, coord_to_offset( i * 8, 0/*y * 8*/, stride_b, false ), stride_b, false );
    mat_c = coopMatMulAddNV( mat_a, mat_b, mat_c );
  }
  coopMatStoreNV( mat_c, data_d, coord_to_offset( x * 8, y * 8, stride_c, false ), stride_c, false );
}

