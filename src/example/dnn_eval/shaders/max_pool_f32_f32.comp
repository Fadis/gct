#version 450

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_arithmetic : enable
#extension GL_KHR_memory_scope_semantics : enable

layout(local_size_x = 32, local_size_y = 32, local_size_z = 1 ) in;
layout(std430, binding = 0) buffer input_vector {
  float input_data[];
};
layout(std430, binding = 1) buffer output_vector {
  float output_data[];
};

layout(constant_id = 1) const int filter_size_x = 0;
layout(constant_id = 2) const int filter_size_y = 0;
layout(constant_id = 3) const int filter_size_z = 0;
layout(constant_id = 4) const int filter_size_w = 0;
layout(constant_id = 5) const int lpadding = 0;
layout(constant_id = 6) const int rpadding = 0;
layout(constant_id = 7) const int tpadding = 0;
layout(constant_id = 8) const int bpadding = 0;
layout(constant_id = 9) const int stride_x = 0;
layout(constant_id = 10) const int stride_y = 0;
layout(constant_id = 11) const int stride_z = 0;
layout(constant_id = 12) const int stride_w = 0;
layout(constant_id = 13) const int input_dim_x = 0;
layout(constant_id = 14) const int input_dim_y = 0;
layout(constant_id = 15) const int input_dim_z = 0;
layout(constant_id = 16) const int input_dim_w = 0;
layout(constant_id = 17) const int output_dim_x = 0;
layout(constant_id = 18) const int output_dim_y = 0;
layout(constant_id = 19) const int output_dim_z = 0;
layout(constant_id = 20) const int output_dim_w = 0;
layout(constant_id = 21) const float border_value = 0.0;

int get_filter_length() {
  return filter_size_x * filter_size_y * filter_size_z * filter_size_w;
}

int get_input_offset( int i ) {
  const int input_relative_x = i % filter_size_x;
  const int input_relative_y = ( i / ( filter_size_x ) ) % filter_size_y;
  const int input_relative_z = ( i / ( filter_size_x * filter_size_y ) ) % filter_size_z;
  const int input_relative_w = ( i / ( filter_size_x * filter_size_y * filter_size_z ) ) % filter_size_w;
  const int output_x = int( gl_GlobalInvocationID.x );
  const int output_y = int( gl_GlobalInvocationID.y );
  const int output_z = int( gl_GlobalInvocationID.z ) % output_dim_z;
  const int output_w = int( gl_GlobalInvocationID.z ) / output_dim_z;
  const int input_x = output_x * stride_x - lpadding + input_relative_x;
  const int input_y = output_y * stride_y - tpadding + input_relative_y;
  const int input_z = output_z * stride_z            + input_relative_z;
  const int input_w = output_w * stride_w            + input_relative_w;

  return
    (
      input_x < 0 || input_x >= input_dim_x ||
      input_y < 0 || input_y >= input_dim_y ||
      input_z < 0 || input_z >= input_dim_z ||
      input_w < 0 || input_w >= input_dim_w ||
      output_x < 0 || output_x >= output_dim_x ||
      output_y < 0 || output_y >= output_dim_y ||
      output_z < 0 || output_z >= output_dim_z ||
      output_w < 0 || output_w >= output_dim_w
    ) ?
    -1 :
    input_dim_x * input_dim_y * input_dim_z * input_w +
    input_dim_x * input_dim_y * input_z +
    input_dim_x * input_y +
    input_x;
}

int get_output_offset() {
  const int output_x = int( gl_GlobalInvocationID.x );
  const int output_y = int( gl_GlobalInvocationID.y );
  const int output_z = int( gl_GlobalInvocationID.z ) % output_dim_z;
  const int output_w = int( gl_GlobalInvocationID.z ) / output_dim_z;
  return
    (
      output_x >= output_dim_x ||
      output_y >= output_dim_y ||
      output_z >= output_dim_z ||
      output_w >= output_dim_w
    ) ?
    -1 :
    output_dim_x * output_dim_y * output_dim_z * output_w +
    output_dim_x * output_dim_y * output_z +
    output_dim_x * output_y +
    output_x;
}

float get_input( int i ) {
  const int input_offset = get_input_offset( i );
  return
    ( input_offset < 0 ) ?
    border_value :
    input_data[ input_offset ];
}

void set_output( float v ) {
  const int output_offset = get_output_offset();
  if( output_offset >= 0 ) {
    output_data[ output_offset ] = v;
  }
}

void main() {
  const int filter_length = get_filter_length();
  float v = -10000.0;
  for( int i = 0; i != filter_length; i++ ) {
    const int input_offset = get_input_offset( i );
    if( input_offset != -1 ) {
      v = max( input_data[ input_offset ], v );
    }
  }
  set_output( v );
}

