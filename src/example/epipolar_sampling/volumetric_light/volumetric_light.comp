#version 450

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable

layout (binding = 0, rgba32f) readonly uniform image2DArray gbuffer;
layout (binding = 1, rgba32f) writeonly uniform image2D dest_image;

layout(local_size_x = 256, local_size_y = 4 ) in;

layout(push_constant) uniform PushConstants {
  vec4 eye_pos;
  vec4 light_pos;
  vec4 g;
  vec4 fog_color;
  float light_energy;
  uint stride;
  uint vertex_offset;
} push_constants;

layout(std430, binding = 2) buffer vertex_buffer {
  float vertices[];
};

#include "constants.h"
#include "omnishadow.h"
#include "volumetric.h"

void main()  {
  const uint line_index = gl_GlobalInvocationID.x;
  const uint line_count = gl_NumWorkGroups.x * gl_WorkGroupSize.x;
  const uint vertex_index = gl_GlobalInvocationID.y;
  const uint vertex_count = gl_NumWorkGroups.y * gl_WorkGroupSize.y;
  const uint in_index = ( line_index * vertex_count + vertex_index ) * push_constants.stride;
  // 頂点バッファからこのスレッドが担当する頂点の位置を取り出す
  const ivec2 screen_pos = ivec2( vec2(
    min( vertices[ in_index + push_constants.vertex_offset ] * 0.5 + 0.5, 1.0 ),
    min( vertices[ in_index + push_constants.vertex_offset + 1 ] * 0.5 + 0.5, 1.0 )
  ) * vec2( imageSize( gbuffer ).xy - ivec2( 1, 1 ) ) );
  // 頂点の位置に対応するワールド空間での座標を取り出す
  const vec3 pos = imageLoad( gbuffer, ivec3( screen_pos, 0 ) ).xyz;
  vec3 sum = vec3( 0.0, 0.0, 0.0 );
  float dist = distance( pos, push_constants.eye_pos.xyz );
  // 視点からワールド空間での座標までの間を256等分にする
  for( uint d = 0; d != 256; d++ ) {
    // 分割点の座標sample_posを求める
    const vec3 sample_pos = mix( pos, push_constants.eye_pos.xyz, float( d )/256.0 );
    // シャドウマップでこの位置に光源からの光が届くかを調べる
    if( simple_shadow_omni( sample_pos.xyz, push_constants.light_pos.xyz ) != 0.0 ) {
      // 光源からsample_posに向かう光が受ける吸収
      const vec3 incoming_rate = beer_lambert( push_constants.fog_color.xyz, distance( sample_pos, push_constants.light_pos.xyz ) );
      // sample_posから視点に向かう光が受ける吸収
      const vec3 outgoing_rate = beer_lambert( push_constants.fog_color.xyz, distance( sample_pos, push_constants.eye_pos.xyz ) );
      // sample_posに届く光のエネルギー
      const vec3 incoming_light = incoming_rate * push_constants.light_energy;
      const vec3 V = normalize(push_constants.eye_pos.xyz-sample_pos);
      const vec3 L = normalize(push_constants.light_pos.xyz-sample_pos);
      const float theta = acos( dot( V, L ) );
      // sample_posを経て視点に届く光のエネルギー
      const vec3 outgoing_light = outgoing_rate * incoming_light * henyey_greenstein_schlick( push_constants.g.xyz, theta );
      // 上のエネルギーを区間について積分
      sum += outgoing_light * dist/256.0;
    }
  }
  imageStore( dest_image, ivec2( line_index, vertex_index ), vec4( sum, dist ) );
}

