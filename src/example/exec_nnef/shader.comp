#version 450

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_arithmetic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#extension GL_NV_cooperative_matrix : enable

layout(local_size_x = 16, local_size_y = 16 ) in;
layout(std430, binding = 0) buffer a {
  float data_a[];
};
layout(std430, binding = 1) buffer b {
  float data_b[];
};
layout(std430, binding = 2) buffer c {
  float data_c[];
};
layout(std430, binding = 3) buffer d {
  float data_d[];
};

void main() {
  const uint x = gl_GlobalInvocationID.x;
  const uint y = gl_GlobalInvocationID.y;
  const uint width = gl_WorkGroupSize.x * gl_NumWorkGroups.x;
  const uint index = x + y * width;
  fcoopmatNV<16, gl_ScopeSubgroup, 16, 8> mat_a;
  fcoopmatNV<16, gl_ScopeSubgroup, 8, 16> mat_b;
  fcoopmatNV<16, gl_ScopeSubgroup, 8, 8> mat_c;
  fcoopmatNV<16, gl_ScopeSubgroup, 8, 8> mat_d;
  
//  mat_a[ gl_SubgroupID ] = float16_t( data_a[ gl_SubgroupID ] );
//  mat_b[ gl_SubgroupID ] = float16_t( data_b[ gl_SubgroupID ] );
//  mat_c[ gl_SubgroupID ] = float16_t( data_c[ gl_SubgroupID ] );
//  mat_d = coopMatMulAddNV( mat_a, mat_b, mat_c );
//  data_d[ index ] = float( mat_d[ gl_SubgroupID ] );
}

