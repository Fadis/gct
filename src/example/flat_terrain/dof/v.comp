#version 460

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_shader_image_load_formatted : enable

#define GCT_USE_IMAGE_POOL_WITHOUT_FORMAT

layout(local_size_x = 1, local_size_y = 128 ) in;

#include <gct/constants.h>
#include <gct/scene_graph/image_pool.h>
#include <gct/filter_cache.h>

layout(push_constant) uniform PushConstants {
  uint partial0;
  uint partial1;
  uint partial2;
  uint partial3;
  uint partial4;
  uint dest;
  uint coc;
} push_constants;

int lrlfilter_size = 65;
// 特異値分解で求めた分離可能なフィルタのパラメータ
float lrlfilter0[65*33] = float[](
#include <gct/lrlf_dof/v0.inc>
);
float lrlfilter1[65*33] = float[](
#include <gct/lrlf_dof/v1.inc>
);
float lrlfilter2[65*33] = float[](
#include <gct/lrlf_dof/v2.inc>
);
float lrlfilter3[65*33] = float[](
#include <gct/lrlf_dof/v3.inc>
);
float lrlfilter4[65*33] = float[](
#include <gct/lrlf_dof/v4.inc>
);

const int kernel_size = 32;
shared vec4[gl_WorkGroupSize.y+kernel_size*2+1] cache0;
shared vec4[gl_WorkGroupSize.y+kernel_size*2+1] cache1;
shared vec4[gl_WorkGroupSize.y+kernel_size*2+1] cache2;
shared vec4[gl_WorkGroupSize.y+kernel_size*2+1] cache3;
shared vec4[gl_WorkGroupSize.y+kernel_size*2+1] cache4;

uint get_lrlfilter_by_size( float s ) {
  return uint( 0.0983607 * ( -47.0+100.0*sqrt( max( s, 0 ) ) ) );
}

void main() {
  const ivec2 screen_pos = ivec2( gl_GlobalInvocationID.xy );
  const uint layer = gl_GlobalInvocationID.z;
  const uint lcpos = gl_LocalInvocationID.y;
  const uint hcpos = lcpos + gl_WorkGroupSize.y;
  const ivec2 image_size = imageSize( image_pool_2d_array[ nonuniformEXT( push_constants.dest ) ] ).xy;
  const ivec4 sample_pos = vertical_filter_cache_pos( screen_pos, image_size, gl_WorkGroupSize.y, kernel_size );
  // 縦256ピクセルのフィルタを計算するのに必要な範囲のピクセルとCoCを共有メモリにロードする
  cache0[ lcpos ] = imageLoad( image_pool_2d_array[ nonuniformEXT( push_constants.partial0 ) ], ivec3( sample_pos.xy, layer ) );
  cache1[ lcpos ] = imageLoad( image_pool_2d_array[ nonuniformEXT( push_constants.partial1 ) ], ivec3( sample_pos.xy, layer ) );
  cache2[ lcpos ] = imageLoad( image_pool_2d_array[ nonuniformEXT( push_constants.partial2 ) ], ivec3( sample_pos.xy, layer ) );
  cache3[ lcpos ] = imageLoad( image_pool_2d_array[ nonuniformEXT( push_constants.partial3 ) ], ivec3( sample_pos.xy, layer ) );
  cache4[ lcpos ] = imageLoad( image_pool_2d_array[ nonuniformEXT( push_constants.partial4 ) ], ivec3( sample_pos.xy, layer ) );
  if( hcpos < gl_WorkGroupSize.y+kernel_size*2+1 ) {
    cache0[ hcpos ] = imageLoad( image_pool_2d_array[ nonuniformEXT( push_constants.partial0 ) ], ivec3( sample_pos.zw, layer ) );
    cache1[ hcpos ] = imageLoad( image_pool_2d_array[ nonuniformEXT( push_constants.partial1 ) ], ivec3( sample_pos.zw, layer ) );
    cache2[ hcpos ] = imageLoad( image_pool_2d_array[ nonuniformEXT( push_constants.partial2 ) ], ivec3( sample_pos.zw, layer ) );
    cache3[ hcpos ] = imageLoad( image_pool_2d_array[ nonuniformEXT( push_constants.partial3 ) ], ivec3( sample_pos.zw, layer ) );
    cache4[ hcpos ] = imageLoad( image_pool_2d_array[ nonuniformEXT( push_constants.partial4 ) ], ivec3( sample_pos.zw, layer ) );
  }
  barrier();
  vec4 sum = vec4( 0.0, 0.0, 0.0, 0.0 );
  const uint coc_ = min( uint( max( imageLoad( image_pool_2d_array[ nonuniformEXT( push_constants.coc ) ], ivec3( screen_pos, layer ) ).r, 0.0 ) ), 32u ) * lrlfilter_size;
  if( coc_ == 0 ) {
    imageStore( image_pool_2d_array[ nonuniformEXT( push_constants.dest ) ], ivec3( screen_pos, layer ), cache0[ lcpos + lrlfilter_size / 2 ] );
    return;
  }
  for( uint i = 0; i != lrlfilter_size; i++ ) {
    // CoCの大きさに対応する係数を使ってフィルタをかける
    sum += cache0[ lcpos + i ] * lrlfilter0[ i + coc_ ];
    sum += cache1[ lcpos + i ] * lrlfilter1[ i + coc_ ];
    sum += cache2[ lcpos + i ] * lrlfilter2[ i + coc_ ];
    sum += cache3[ lcpos + i ] * lrlfilter3[ i + coc_ ];
    sum += cache4[ lcpos + i ] * lrlfilter4[ i + coc_ ];
  }
  imageStore( image_pool_2d_array[ nonuniformEXT( push_constants.dest ) ], ivec3( screen_pos, layer ), sum );
}

