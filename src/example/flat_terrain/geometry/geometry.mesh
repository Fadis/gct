#version 460

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_mesh_shader : enable
#extension GL_EXT_shader_16bit_storage : enable
#extension GL_EXT_shader_8bit_storage : enable
#extension GL_KHR_shader_subgroup_arithmetic : enable

#define GCT_ENABLE_8BIT_16BIT_STORAGE
#include <gct/scene_graph.h>
#include <gct/global_uniforms.h>
#include <gct/scene_graph/accessor.h>
#include <gct/global_uniforms.h>

layout(local_size_x = 32, local_size_y = 1 ) in;

layout(triangles, max_vertices = 96, max_primitives = 32) out;

layout (location = 0) out vec4 output_position[];
layout (location = 1) out vec3 output_normal[];
layout (location = 2) out vec3 output_tangent[];
layout (location = 3) out vec2 output_tex_coord[];
layout (location = 4) out vec4 output_optflow[];
layout (location = 5) flat out vec4 output_id[];
layout (location = 6) out vec4 output_previous_position[];

struct task_data {
  uint meshlet_index[ 32 ];
  mat4 l2w;
  mat4 l2s;
  uint resource_pair_id;
};
taskPayloadSharedEXT task_data td;

void main() {
  const resource_pair_type id = resource_pair[ push_constants.instance + td.resource_pair_id ];
  const primitive_resource_index_type prim = primitive_resource_index[ id.prim ];
  const mesh_type mesh = mesh_pool[ prim.mesh ];

  const mat4 l2w = td.l2w;
  const mat4 l2s = td.l2s;
  
  const uint max_vertex_count = gl_WorkGroupSize.x * 3u;

  const uint meshlet_id = td.meshlet_index[ gl_WorkGroupID.x ];
  const uint vertex_count = min( mesh.vertex_count - meshlet_id * max_vertex_count, max_vertex_count );
  
  const uint output_primitive_id = gl_LocalInvocationID.x;
  const uint output_vertex_id = output_primitive_id * 3u;

  const bool in_range = vertex_count > output_vertex_id;
  
  const uint input_primitive_id = meshlet_id * 32u + output_primitive_id;
  
  const vertex_attribute v0 = in_range ? read_vertex_attribute( mesh, input_primitive_id * 3u + 0u ) : null_attr;
  const vertex_attribute v1 = in_range ? read_vertex_attribute( mesh, input_primitive_id * 3u + 1u ) : null_attr;
  const vertex_attribute v2 = in_range ? read_vertex_attribute( mesh, input_primitive_id * 3u + 2u ) : null_attr;

  const vec4 wp0 = l2w * v0.position;
  const vec4 wp1 = l2w * v1.position;
  const vec4 wp2 = l2w * v2.position;
 
  const vec3 fn = normalize( cross( wp2.xyz - wp0.xyz, wp1.xyz - wp0.xyz ) );

  const bool visible = in_range && ( prim.cull == 0 || ( dot( fn.xyz, global_uniforms.eye_pos.xyz - wp0.xyz ) >= 0 ) );
 
  const uint filtered_vertex_count = subgroupAdd( visible ? 3 : 0 );
  const uint filtered_vertex_offset = subgroupExclusiveAdd( visible ? 3 : 0 );

  SetMeshOutputsEXT( filtered_vertex_count, filtered_vertex_count / 3 );

  if( !visible ) return;

  gl_MeshVerticesEXT[ filtered_vertex_offset ].gl_Position = l2s * v0.position;
  gl_MeshVerticesEXT[ filtered_vertex_offset + 1u ].gl_Position = l2s * v1.position;
  gl_MeshVerticesEXT[ filtered_vertex_offset + 2u ].gl_Position = l2s * v2.position;
  output_position[ filtered_vertex_offset ] = wp0;
  output_position[ filtered_vertex_offset + 1u ] = wp1;
  output_position[ filtered_vertex_offset + 2u ] = wp2;
  output_normal[ filtered_vertex_offset ] = ( l2w * (( v0.normal == vec4( 0, 0, 0, 1 ) ) ? vec4( fn, 1.0 ) : v0.normal ) ).xyz;
  output_normal[ filtered_vertex_offset + 1u ] = ( l2w * (( v1.normal == vec4( 0, 0, 0, 1 ) ) ? vec4( fn, 1.0 ) : v1.normal ) ).xyz;
  output_normal[ filtered_vertex_offset + 2u ] = ( l2w * (( v2.normal == vec4( 0, 0, 0, 1 ) ) ? vec4( fn, 1.0 ) : v2.normal ) ).xyz;
  output_normal[ filtered_vertex_offset + 1u ] = ( l2w * v1.normal ).xyz;
  output_normal[ filtered_vertex_offset + 2u ] = ( l2w * v2.normal ).xyz;
  output_tangent[ filtered_vertex_offset ] = ( l2w * v0.tangent ).xyz;
  output_tangent[ filtered_vertex_offset + 1u ] = ( l2w * v1.tangent ).xyz;
  output_tangent[ filtered_vertex_offset + 2u ] = ( l2w * v2.tangent ).xyz;
  output_tex_coord[ filtered_vertex_offset ] = v0.tex_coord0.xy;
  output_tex_coord[ filtered_vertex_offset + 1u ] = v1.tex_coord0.xy;
  output_tex_coord[ filtered_vertex_offset + 2u ] = v2.tex_coord0.xy;
  output_optflow[ filtered_vertex_offset ] = vec4( 0, 0, 0, 0 );
  output_optflow[ filtered_vertex_offset + 1u ] = vec4( 0, 0, 0, 0 );
  output_optflow[ filtered_vertex_offset + 2u ] = vec4( 0, 0, 0, 0 );
  output_id[ filtered_vertex_offset ] = vec4( id.inst, id.prim, 0, 0 );
  output_id[ filtered_vertex_offset + 1u ] = vec4( id.inst, id.prim, 0, 0 );
  output_id[ filtered_vertex_offset + 2u ] = vec4( id.inst, id.prim, 0, 0 );
  gl_PrimitiveTriangleIndicesEXT[ filtered_vertex_offset / 3 ] = uvec3( filtered_vertex_offset, filtered_vertex_offset + 1, filtered_vertex_offset + 2 );
}

