#version 460

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable
#extension GL_EXT_nonuniform_qualifier : enable

// メッシュシェーダー拡張を使う
#extension GL_EXT_mesh_shader : enable

#include <gct/scene_graph/texture_pool.h>
#include <gct/global_uniforms.h>

// 1つのローカルワークグループには32スレッドが含まれる
layout(local_size_x = 32, local_size_y = 1 ) in;

// 1つのローカルワークグループから最大で96頂点32プリミティブの三角形を出力する
layout(triangles, max_vertices = 96, max_primitives = 32) out;

// 頂点属性
layout (location = 0) out vec4 output_position[]; // 頂点座標
layout (location = 1) out vec3 output_normal[]; // 法線

// タスクペイロード
struct task_data {
  // 見えると判断されたメッシュレットのID
  uint meshlet_index[ 32 ];
  // ワールド座標系からスクリーン座標系への変換行列
  mat4 w2s;
  // メッシュシェーダーの実行元のタスクシェーダーが何番目のローカルワークグループかを表すID
  uint tasklet_id;
};
taskPayloadSharedEXT task_data td;

// タスクシェーダーのローカルワークグループのIDをそのローカルワークグループが担当する32x16のタイルの位置に変換する
ivec3 index_to_task_offset( uint v ) {
  const int x_index = int( v & 0x7 ) - 4;
  const int y_index = int( ( v >> 3 ) & 0xF ) - 8;
  const int layer = int( v >> 7 );
  const bool hole =
    layer >= 1 &&
    x_index >= -2 &&
    x_index < 2 &&
    y_index >= -4 &&
    y_index < 4;
  return
    hole ?
    ivec3( 0, 0, -1 ) :
    ivec3( x_index, y_index, layer );
}

// メッシュシェーダーのローカルワークグループのIDを4x4のタイルのメッシュレットの位置に変換する
ivec2 index_to_meshlet_offset( uint v, ivec3 task_offset ) {
  const int x_index = int( v & 0x7u );
  const int y_index = int( v >> 3 );
  return ivec2( x_index + task_offset.x * 8, y_index + task_offset.y * 4 );
}

// メッシュシェーダーのローカルワークグループ内のスレッドのIDをプリミティブの位置に変換する
ivec3 index_to_primitive_offset( uint v, ivec2 meshlet_offset ) {
  const int x_index = int( ( v >> 1 ) & 0x3 );
  const int y_index = int( ( v >> 3 ) & 0x3 );
  const int triangle_index = int( v & 0x1 );
  return ivec3( x_index + meshlet_offset.x * 4, y_index + meshlet_offset.y * 4, triangle_index );
}

// 三角形2枚で縦横単位長の四角形を描く頂点配列
const vec2 vertices[6] = vec2[](
  vec2( 0, 0 ),
  vec2( 0, 1 ),
  vec2( 1, 0 ),
  vec2( 1, 0 ),
  vec2( 0, 1 ),
  vec2( 1, 1 )
);

// プリミティブの最初の頂点の座標とグリッドの幅からワールド空間での頂点座標を得る
vec4 index_to_vertex( uint v, uint triangle_id, vec2 primitive_pos, float edge_length ) {
  vec2 pos = vertices[ v + ( ( triangle_id == 0 ) ? 0 : 3 ) ] * edge_length + primitive_pos;
  return vec4( pos.x, 0.0, pos.y, 1.0 );
}

void main() {
  // レイヤー0のグリッドの頂点の間隔を0.5mにする
  const float grid_width = 0.5;
  
  // 視点の位置をグリッドの頂点にアラインさせて、中心のプリミティブの座標を求める
  const vec4 world_center = global_uniforms.eye_pos;
  const ivec2 center_primitive = ivec2( floor( world_center.xz / grid_width ) );
  const vec2 aligned_world_center = vec2( center_primitive ) * grid_width;

  // このローカルワークグループが処理する32x16のタイルの位置を求める
  const ivec3 task_offset = index_to_task_offset( td.tasklet_id );
  // このローカルワークグループが処理する4x4のタイルの位置を求める
  const ivec2 meshlet_offset = index_to_meshlet_offset( td.meshlet_index[ gl_WorkGroupID.x ], task_offset );
  // このスレッドが処理するプリミティブの位置を求める
  const ivec3 primitive_offset = index_to_primitive_offset( gl_LocalInvocationID.x, meshlet_offset );
  // グリッドの頂点間の距離を求める
  // レイヤーが1つ進む毎に間隔が倍になる
  const float edge_length = grid_width * ( 1 << task_offset.z );
  // プリミティブの最初の頂点の座標を求める
  const vec2 primitive_pos = aligned_world_center + vec2( primitive_offset.xy ) * edge_length;

  // タスクペイロードから変換行列を取り出す
  const mat4 w2s = td.w2s;

  // このスレッドが出力の何番目に頂点を書くべきかを求める
  const uint vertex_offset = gl_LocalInvocationID.x * 3u;

  // 96頂点32プリミティブを出力できるようにする
  SetMeshOutputsEXT( 96, 96 / 3 );

  // このスレッドが処理するプリミティブの3つの頂点の座標を求める
  const vec4 wp0 = index_to_vertex( 0u, primitive_offset.z, primitive_pos, edge_length );
  const vec4 wp1 = index_to_vertex( 1u, primitive_offset.z, primitive_pos, edge_length );
  const vec4 wp2 = index_to_vertex( 2u, primitive_offset.z, primitive_pos, edge_length );
  
  // 頂点のスクリーン座標系での座標を出力先に書く
  gl_MeshVerticesEXT[ vertex_offset ].gl_Position = w2s * wp0;
  gl_MeshVerticesEXT[ vertex_offset + 1u ].gl_Position = w2s * wp1;
  gl_MeshVerticesEXT[ vertex_offset + 2u ].gl_Position = w2s * wp2;
  // 頂点のワールド座標系での座標を出力先に書く
  output_position[ vertex_offset ] = wp0;
  output_position[ vertex_offset + 1u ] = wp1;
  output_position[ vertex_offset + 2u ] = wp2;
  // 頂点のワールド座標系での法線を出力先に書く
  output_normal[ vertex_offset ] = vec3( 0, 1, 0 );
  output_normal[ vertex_offset + 1u ] = vec3( 0, 1, 0 );
  output_normal[ vertex_offset + 2u ] = vec3( 0, 1, 0 );
  // 上の3頂点で1つの三角形プリミティブになる事を書く
  gl_PrimitiveTriangleIndicesEXT[ vertex_offset / 3 ] = uvec3( vertex_offset, vertex_offset + 1, vertex_offset + 2 );
}

