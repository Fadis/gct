#version 460

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable
#extension GL_EXT_nonuniform_qualifier : enable

// メッシュシェーダー拡張を使う
#extension GL_EXT_mesh_shader : enable

// Subgroup演算拡張を使う ballot系の演算も使う
#extension GL_KHR_shader_subgroup_arithmetic : enable
#extension GL_KHR_shader_subgroup_ballot : enable

#include <gct/aabb_type.h>
#include <gct/scene_graph/matrix_pool.h>
#include <gct/global_uniforms.h>

// 1つのローカルワークグループには32スレッドが含まれる
layout(local_size_x = 32, local_size_y = 1 ) in;

// タスクペイロード
struct task_data {
  // 見えると判断されたメッシュレットのID
  uint meshlet_index[ 32 ];
  // ワールド座標系からスクリーン座標系への変換行列
  mat4 w2s;
  // メッシュシェーダーの実行元のタスクシェーダーが何番目のローカルワークグループかを表すID
  uint tasklet_id;
};
taskPayloadSharedEXT task_data td;

// ローカルワークグループのIDをそのローカルワークグループが担当する32x16のタイルの位置に変換する
ivec3 index_to_task_offset( uint v ) {
  const int x_index = int( v & 0x7 ) - 4;
  const int y_index = int( ( v >> 3 ) & 0xF ) - 8;
  // 何レイヤー目のグリッドを処理するか
  const int layer = int( v >> 7 );
  // 最小のレイヤー以外は1段階小さいレイヤーと重なる部分のタイルを生成しなようにする
  const bool hole =
    layer >= 1 &&
    x_index >= -2 &&
    x_index < 2 &&
    y_index >= -4 &&
    y_index < 4;
  // レイヤー番号-1でタイルを生成すべきでない事を表す
  return
    hole ?
    ivec3( 0, 0, -1 ) :
    ivec3( x_index, y_index, layer );
}

// ローカルワークグループ内のスレッドのIDを4x4のタイルのメッシュレットの位置に変換する
ivec2 index_to_meshlet_offset( uint v, ivec3 task_offset ) {
  const int x_index = int( v & 0x7u );
  const int y_index = int( v >> 3 );
  return ivec2( x_index + task_offset.x * 8, y_index + task_offset.y * 4 );
}

void main() {
  // レイヤー0のグリッドの頂点の間隔を0.5mにする
  const float grid_width = 0.5;

  // 視点の位置をグリッドの頂点にアラインさせて、中心のプリミティブの座標を求める
  const vec4 world_center = global_uniforms.eye_pos;
  const ivec2 center_primitive = ivec2( floor( world_center.xz / grid_width ) );
  const vec2 aligned_world_center = vec2( center_primitive ) * grid_width;

  // このローカルワークグループが処理する32x16のタイルの位置を求める
  const ivec3 task_offset = index_to_task_offset( gl_WorkGroupID.x );
  // このスレッドが処理する4x4のタイルの位置を求める
  const ivec2 meshlet_offset = index_to_meshlet_offset( gl_LocalInvocationID.x, task_offset );
  // グリッドの頂点間の距離を求める
  // レイヤーが1つ進む毎に間隔が倍になる
  const float edge_length = grid_width * ( 1 << task_offset.z );
  // 4x4のタイルの最初のプリミティブの位置を求める
  const vec2 primitive_pos = aligned_world_center + vec2( meshlet_offset.xy * 4 ) * edge_length;
  
  // 4x4のタイルを内包するAABBを求める
  aabb_type meshlet_aabb;
  meshlet_aabb.min = vec4( primitive_pos.x, 0, primitive_pos.y, 1 );
  meshlet_aabb.max = vec4( primitive_pos.x + edge_length * 4, 255, primitive_pos.y + edge_length * 4, 1 );

  // 0番目のレイヤーのタイルはカリングしない
  const bool eye_pos_is_inside = task_offset.z == 0u;

  // ワールド座標系からスクリーン座標系への変換行列
  const mat4 w2s =
    matrix_pool[ global_uniforms.projection_matrix ] *
    matrix_pool[ global_uniforms.camera_matrix ];
  // 変換行列をタスクペイロードに書いておく
  td.w2s = w2s;

  // 4x4のタイルのAABBをスクリーン座標系に変換する
  const aabb_type screen_space_meshlet_aabb =
    transform_aabb( w2s, meshlet_aabb );

  // タイルのAABBがクリッピング空間の範囲内と交差しているかを調べる
  const bool in_frustum =
    screen_space_meshlet_aabb.min.x <= 1.2 &&
    screen_space_meshlet_aabb.min.y <= 1.2 &&
    screen_space_meshlet_aabb.min.z <= 1.2 &&
    screen_space_meshlet_aabb.max.x >= -1.2 &&
    screen_space_meshlet_aabb.max.y >= -1.2 &&
    screen_space_meshlet_aabb.max.z >= -1.2;
  
  // 0番目のレイヤーのタイル、あるいはクリッピング空間の範囲内にあるタイルを見えるタイルとする
  const bool visible = task_offset.z >= 0 && ( eye_pos_is_inside || in_frustum );
  
  // 各スレッドがメッシュレットが見えると判断したかどうかを集める    
  const uvec4 visible_bits = subgroupBallot( visible );
  // このスレッドよりスレッドIDが小さいスレッドの中でメッシュレットが見えると判断したスレッドの数
  const uint offset = subgroupBallotExclusiveBitCount( visible_bits );
  // ローカルワークグループの中でメッシュレットが見えると判断したスレッドの数
  const uint total = subgroupBallotBitCount( visible_bits );

  // タスクシェーダーのローカルワークグループのIDをタスクペイロードに書いておく
  td.tasklet_id = gl_WorkGroupID.x;
  // メッシュレットが見える可能性があったら
  if( visible ) {
    // タスクペイロードにメッシュレットのIDを記録
    td.meshlet_index[ offset ] = gl_LocalInvocationID.x;
  }
  // 見える可能性があるメッシュレットの数だけメッシュシェーダーを実行する
  EmitMeshTasksEXT( total, 1, 1 );
}

