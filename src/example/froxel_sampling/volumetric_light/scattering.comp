#version 450

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable

layout(binding = 0) uniform sampler3D fog_level;
layout (binding = 1, r32f) readonly uniform image3D light_extinction;
layout (binding = 2, r32f) readonly uniform image3D view_extinction;
layout (binding = 3, rgba32f) uniform image3D scattering;

layout(binding = 4) uniform FroxelState {
  mat4 world_to_screen;
  mat4 screen_to_world;
  mat4 world_to_voxel;
  vec4 min_g;
  vec4 max_g;
  vec4 min_color;
  vec4 max_color;
  vec4 eye_pos;
  vec4 light_pos;
  vec4 light_energy;
} froxel_state;

layout(local_size_x = 16, local_size_y = 16, local_size_z = 4 ) in;

#include "constants.h"
#include "volumetric.h"

void main()  {
  const ivec3 screen_pos = ivec3( gl_GlobalInvocationID.xyz );
  const vec3 screen_pos_f = vec3( screen_pos ) / vec3( imageSize( scattering ).xyz ) * 2.0 - 1.0;
  // froxelの各交点において
  vec4 pos = froxel_state.screen_to_world * vec4( screen_pos_f, 1.0 );
  pos /= pos.w;

  vec3 light_energy = froxel_state.light_energy.xyz;
  const vec3 V = normalize( froxel_state.eye_pos.xyz - pos.xyz );
  const vec3 L = normalize( froxel_state.light_pos.xyz - pos.xyz );
  const float theta = acos( dot( V, L ) );
 
  // 光源からこの位置に届く光のエネルギーの割合
  light_energy *= imageLoad( light_extinction, screen_pos ).r;

  {
    const vec3 sample_pos = pos.xyz;
    vec4 sample_pos_in_voxel = froxel_state.world_to_voxel * vec4( sample_pos, 1.0 );
    sample_pos_in_voxel /= sample_pos_in_voxel.w;
    // この位置での霧の濃さ
    const float level = texture( fog_level, sample_pos_in_voxel.xyz * 0.5 + 0.5 ).r;
    // この位置で散乱して視点の方に向きを変える光のエネルギーの割合
    light_energy *= henyey_greenstein_schlick( mix( froxel_state.min_g.rgb, froxel_state.max_g.rgb, level ), theta );
  }
  
  // この位置から視点に届く光のエネルギーの割合
  light_energy *= imageLoad( view_extinction, screen_pos ).r;
  
  const vec4 existing = imageLoad( scattering, screen_pos );
  imageStore( scattering, screen_pos, existing + vec4( light_energy, 1.0 ) );
}

