#version 450

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable

layout (binding = 0, rgba32f) readonly uniform image2DArray gbuffer;
layout (binding = 1) uniform sampler3D scattering;
layout (binding = 2, rgba32f) writeonly uniform image2D dest_image;

layout(binding = 4) uniform FroxelState {
  mat4 world_to_screen;
  mat4 screen_to_world;
  mat4 world_to_voxel;
  vec4 min_g;
  vec4 max_g;
  vec4 min_color;
  vec4 max_color;
  vec4 eye_pos;
  vec4 light_pos;
  vec4 light_energy;
} froxel_state;

#include "omnishadow.h"

layout(local_size_x = 32, local_size_y = 32, local_size_z = 1 ) in;

void main()  {
  const ivec2 screen_pos = ivec2( gl_GlobalInvocationID.xy );
  // スクリーン空間の座標に対応するワールド空間の座標を取得
  const vec3 pos = imageLoad( gbuffer, ivec3( screen_pos, 0 ) ).xyz;
  
  vec3 sum = vec3( 0.0, 0.0, 0.0 );
  float dist = distance( pos.xyz, froxel_state.eye_pos.xyz ) / 256.0;
  // 視点からワールド空間での座標までの間を256分割
  for( uint i = 0; i != 256; i++ ) {
    // 各分割点の座標
    const vec3 sample_pos = mix( froxel_state.eye_pos.xyz, pos.xyz, float( i ) / 256.0 );
    // 分割点に実際に光源からの光が届くかどうかをシャドウマップで判定
    if( simple_shadow_omni( sample_pos.xyz, froxel_state.light_pos.xyz ) != 0.0 ) {
      vec4 sample_pos_in_screen = froxel_state.world_to_screen * vec4( sample_pos, 1.0 );
      sample_pos_in_screen /= sample_pos_in_screen.w;
      const vec3 sample_pos_in_froxel = sample_pos_in_screen.xyz * 0.5 + 0.5;
      // 各分割点から視点に向かって飛んでくる光の散乱を積分する
      sum += texture( scattering, sample_pos_in_froxel ).rgb * dist;
    }
  }

  imageStore( dest_image, screen_pos, vec4( sum, 1.0 ) );
}

