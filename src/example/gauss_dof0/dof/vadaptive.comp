#version 450

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable

layout (binding = 1, rgba32f) readonly uniform image2D src_image;
layout (binding = 2, r32f) readonly uniform image2D coc;
layout (binding = 3, rgba32f) writeonly uniform image2D dest_image;

layout(local_size_x = 1, local_size_y = 256 ) in;

#include "gauss.h"

const int kernel_size = 16;
shared vec4[gl_WorkGroupSize.y+kernel_size*2+1] cache;

uint get_filter_by_size( float s ) {
  return uint( 0.0983607 * ( -47.0+100.0*sqrt( max( s, 0 ) ) ) );
}

void main() {
  const ivec2 screen_pos = ivec2( gl_GlobalInvocationID.xy );
  const uint lcpos = gl_LocalInvocationID.y;
  const uint hcpos = lcpos + gl_WorkGroupSize.y;
  const ivec2 image_size = imageSize( src_image ).xy;
  ivec2 lsample_pos = screen_pos;
  lsample_pos.y = lsample_pos.y - kernel_size;
  ivec2 hsample_pos = lsample_pos;
  // 縦256ピクセルのガウシアンブラーを計算するのに必要な範囲を共有メモリにロードする
  hsample_pos.y += int( gl_WorkGroupSize.y );
  lsample_pos.x = max( min( lsample_pos.x, image_size.x ), 0 );
  lsample_pos.y = max( min( lsample_pos.y, image_size.y ), 0 );
  hsample_pos.x = max( min( hsample_pos.x, image_size.x ), 0 );
  hsample_pos.y = max( min( hsample_pos.y, image_size.y ), 0 );
  cache[ lcpos ] = imageLoad( src_image, lsample_pos );
  if( hcpos < gl_WorkGroupSize.y+kernel_size*2+1 ) {
    cache[ hcpos ] = imageLoad( src_image, hsample_pos );
  }
  barrier();
  float scale = 0.0;
  vec4 sum = vec4( 0.0, 0.0, 0.0, 0.0 );
  // 分散が異なるガウスフィルタの係数を事前に複数求めておく
  // CoCの範囲での積分が0.8を超える最も分散が小さいフィルタを選ぶ
  const uint gauss_head = min( get_filter_by_size( imageLoad( coc, screen_pos ).r ), 57 ) * adaptive_gauss8_16_size;
  // フィルタをかける
  for( uint i = 0; i != adaptive_gauss8_16_size; i++ ) {
    sum += cache[ lcpos + i ] * adaptive_gauss8_16[ i + gauss_head ];
    scale += adaptive_gauss8_16[ i + gauss_head ];
  }
  if( scale > 0.0 ) {
    sum /= scale;
  }
  imageStore( dest_image, screen_pos, sum );
}

