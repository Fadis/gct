#version 450

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_arithmetic : enable

layout (binding = 0, rgba32f) readonly uniform image2DArray gbuffer;
layout (binding = 1, rgba32f) readonly uniform image2D diffuse_image;
layout (binding = 2, rgba32f) uniform image2D dest_image;
layout (binding = 3) uniform sampler3D distance_field;
layout (binding = 4) uniform sampler2D environment_map;

layout(local_size_x = 16, local_size_y = 16 ) in;

#include "constants.h"
#include "poisson_sphere_surface.h"
#include "random.h"
#include "push_constants.h"

mat2 get_rotate_matrix2( float angle ) {
  float s = sin( angle );
  float c = cos( angle );
  return mat2( c, s, -s, c );
}

vec3 diffuse_ambient_light(
  vec3 dir,
  vec3 albedo,
  float roughness,
  float metallicness
) {
  vec3 environment_diffuse = textureLod( environment_map, vec2( dir.x, dir.y ) * 0.5 + 0.5, 0.0 ).rgb * mix( albedo,    vec3( 0, 0, 0 ), metallicness );
  return environment_diffuse;
}

void main() {
  const float kernel_size = 20.0;
  const ivec2 screen_pos = ivec2( gl_GlobalInvocationID.xy );
  const vec4 center_ = imageLoad( gbuffer, ivec3( screen_pos, 0 ) );
  vec3 normal = imageLoad( gbuffer, ivec3( screen_pos, 7 ) ).xyz;
  const vec2 mr = imageLoad( gbuffer, ivec3( screen_pos, 4 ) ).rg;
  const float metallicness = mr.r;
  const float roughness = mr.g;
  const vec3 center = center_.xyz;
  
  const mat3 rot3 = mat3( get_rotate_matrix2( rand1( vec2( screen_pos.xy ) ) * 2 * pi ) );
  
  const ivec3 image_size = imageSize( gbuffer );
  
  vec3 env_color = vec3( 0.0, 0.0, 0.0 );
  float env_total = 0;
  /*for( int i = 0; i < poisson_sphere_surface_sample_count; i++ )*/ {
    vec3 offset = ( rot3 * poisson_sphere_surface[ int( ( sin( rand1( vec2( screen_pos.yx ) ) ) * 0.5 + 0.5 ) * poisson_sphere_surface_sample_count - 1 ) ] ) * kernel_size;
    if( dot( offset, normal ) < 0.0 ) {
      offset = -offset;
    }
    vec3 center_in_voxel_space = ( dynamic_uniforms.voxel * vec4( center, 1.0 ) ).xyz;
    const vec3 direction_in_voxel_space = ( dynamic_uniforms.voxel * vec4( center + offset, 1.0 ) ).xyz - center_in_voxel_space;
    for( int j = 0; j < 64; j++ ) {
      float r = texture( distance_field, center_in_voxel_space ).r;
      center_in_voxel_space += direction_in_voxel_space * r;
    }  
    const vec3 world_pos = ( dynamic_uniforms.inversed_voxel * vec4( center_in_voxel_space, 1.0 ) ).xyz;
    vec4 sample_screen_pos = dynamic_uniforms.projection_matrix * dynamic_uniforms.camera_matrix * vec4( world_pos, 1.0 );
    sample_screen_pos /= sample_screen_pos.w;
    ivec2 sample_pos = ivec2(
      ( sample_screen_pos.x * 0.5 + 0.5 ) * ( image_size.x - 1 ), 
      ( sample_screen_pos.y * 0.5 + 0.5 ) * ( image_size.y - 1 )
    );
    vec3 dir = normalize( offset );
    //float level = min( distance( world_pos.xyz, center ), 5.0 )/5.0;
    //imageStore( dest_image, screen_pos, vec4( level, level, level, 1.0 ) );
    //return;
    if( sample_pos.x >= 0 && sample_pos.x < image_size.x && sample_pos.y >= 0 && sample_pos.y < image_size.y ) {
      sample_pos.x = max( min( sample_pos.x, image_size.x - 1 ), 0 );
      sample_pos.y = max( min( sample_pos.y, image_size.y - 1 ), 0 );
      const vec4 sample_world_pos = imageLoad( gbuffer, ivec3( sample_pos, 0 ) );
      float travel_distance = distance( sample_world_pos.xyz, center );
      //if( distance( sample_world_pos.xyz, world_pos ) < 2.0 ) {
        const vec3 sample_normal = imageLoad( gbuffer, ivec3( sample_pos, 7 ) ).xyz;
        const vec3 sample_diffuse = imageLoad( diffuse_image, sample_pos ).rgb;
        imageStore( dest_image, screen_pos, vec4( sample_diffuse * 3000 * 1/max( travel_distance * travel_distance, 1.0 ) * max( dot( normal, dir ), 0 ) /** max( dot( sample_normal, dir ), 0 )*/, 1.0 ) );
        return;
      //}
      //else {
      //  imageStore( dest_image, screen_pos, vec4( 1.0, 0.0, 0.0, 1.0 ) );
      //  return;
      //}
      env_total += dot( normal, dir );
    }
    else {
      float travel_distance = min( distance( world_pos.xyz, center ), 5.0 );
      env_color += travel_distance/5.0 * dot( normal, dir ) * diffuse_ambient_light( dir, vec3( 1.0, 1.0, 1.0 ), roughness, metallicness );
      env_total += dot( normal, dir );
    }
  }
  env_color /= env_total;
  imageStore( dest_image, screen_pos, vec4( env_color, 1.0 ) );
}

