#version 450

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable

#include <gct/get_neighbor.h>
#include <gct/encode_pos.h>

layout (binding = 2, r32ui) uniform uimage3D dest_image;

layout(push_constant) uniform PushConstants {
  uint distance;
} push_constants;

layout(local_size_x = 16, local_size_y = 16, local_size_z = 1 ) in;

void main()  {
  const ivec3 image_size = imageSize( dest_image );
  ivec3 pos = ivec3( gl_GlobalInvocationID.xyz );
  const uint index = pos.z / image_size.z;
  pos.z %= image_size.z;
  if( pos.x >= image_size.x ) return;
  if( pos.y >= image_size.y ) return;
  if( pos.z >= image_size.z ) return;
  const ivec3 target = get_neighbor( pos, push_constants.distance, index );
  if( target.x >= image_size.x ) return;
  if( target.y >= image_size.y ) return;
  if( target.z >= image_size.z ) return;
  
  const uint center_encoded = imageLoad( dest_image, pos ).r;
  if( decode_pos_empty( center_encoded ) ) return;
  ivec3 center = decode_pos_3d( center_encoded );

  uint existing_encoded = imageLoad( dest_image, target ).r;
  for( uint retry = 0; retry != 16; retry++ ) {
    if( decode_pos_empty( existing_encoded ) ) {
      uint result = imageAtomicCompSwap( dest_image, target, existing_encoded, center_encoded );
      if( result == existing_encoded ) return;
      existing_encoded = result;
    }
    else {
      ivec3 existing = decode_pos_3d( existing_encoded );
      float d_old = distance( vec3( existing ), vec3( target ) );
      float d_new = distance( vec3( center ), vec3( target ) );
      if( d_old <= d_new ) return;
      uint result = imageAtomicCompSwap( dest_image, target, existing_encoded, center_encoded );
      if( result == existing_encoded ) return;
      existing_encoded = result;
    }
  }
}

