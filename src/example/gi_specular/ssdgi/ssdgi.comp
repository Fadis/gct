#version 450

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_arithmetic : enable

layout (binding = 0, rgba32f) readonly uniform image2DArray gbuffer;
layout (binding = 1, rgba32f) readonly uniform image2D diffuse_image;
layout (binding = 2, rgba32f) readonly uniform image2D reproject;
layout (binding = 3, rgba32f) uniform image2D dest_image;
layout (binding = 4) uniform sampler3D distance_field;
layout (binding = 5) uniform sampler2D environment_map;
layout (binding = 6, r32ui) readonly uniform uimage2D src_history;
layout (binding = 7, r32ui) writeonly uniform uimage2D dest_history;

layout(local_size_x = 16, local_size_y = 16 ) in;

#include "constants.h"
#include "poisson_sphere_surface.h"
#include "random.h"
#include "push_constants.h"

mat2 get_rotate_matrix2( float angle ) {
  float s = sin( angle );
  float c = cos( angle );
  return mat2( c, s, -s, c );
}

vec3 diffuse_ambient_light(
  vec3 dir,
  vec3 albedo,
  float roughness,
  float metallicness
) {
  vec3 environment_diffuse = textureLod( environment_map, vec2( dir.x, dir.y ) * 0.5 + 0.5, 0.0 ).rgb * mix( albedo,    vec3( 0, 0, 0 ), metallicness );
  return environment_diffuse;
}

void main() {
  const float kernel_size = 20.0;
  const ivec2 screen_pos = ivec2( gl_GlobalInvocationID.xy );
  const vec4 center_ = imageLoad( gbuffer, ivec3( screen_pos, 0 ) );
  vec3 normal = imageLoad( gbuffer, ivec3( screen_pos, 2 ) ).xyz;
  if( normal == vec3( 0, 0, 0 ) ) {
    imageStore( dest_image, screen_pos, vec4( 0, 0, 0, 0 ) );
    return;
  }
  const vec2 mr = imageLoad( gbuffer, ivec3( screen_pos, 4 ) ).rg;
  const float metallicness = mr.r;
  const float roughness = mr.g;
  const vec3 center = center_.xyz;
  
  const mat3 rot3 = mat3( get_rotate_matrix2( rand1( vec2( screen_pos.xy ) + dynamic_uniforms.frame_counter / 48 ) * 2 * pi ) );
  
  const ivec3 image_size = imageSize( gbuffer );
  const ivec2 image_right_bottom = image_size.xy - ivec2( 1, 1 );
  float visibility = 0.0;
  vec3 env_color = vec3( 0.0, 0.0, 0.0 );
  vec3 center_in_voxel_space = ( dynamic_uniforms.voxel * vec4( center, 1.0 ) ).xyz;
  
  {
    vec3 ray_dir = ( rot3 * poisson_sphere_surface[ ( int( rand1( vec2( screen_pos.yx ) ) * poisson_sphere_surface_sample_count ) + dynamic_uniforms.frame_counter / 3 ) % poisson_sphere_surface_sample_count ] );
    if( dot( normal, ray_dir ) < 0.0 ) {
      ray_dir = -ray_dir;
    }
    vec3 current_pos_in_voxel_space = center_in_voxel_space;
    const vec3 direction_in_voxel_space = normalize( ( dynamic_uniforms.voxel * vec4( center + ray_dir, 1.0 ) ).xyz - current_pos_in_voxel_space );
    for( int j = 0; j < 64; j++ ) {
      float r = texture( distance_field, current_pos_in_voxel_space ).r;
      current_pos_in_voxel_space += direction_in_voxel_space * r/32.0;
    }
    vec3 world_pos = ( dynamic_uniforms.inversed_voxel * vec4( current_pos_in_voxel_space, 1.0 ) ).xyz;
    vec4 sample_screen_pos = dynamic_uniforms.projection_matrix * dynamic_uniforms.camera_matrix * vec4( world_pos, 1.0 );
    sample_screen_pos /= sample_screen_pos.w;
    ivec2 sample_pos = ivec2(
      ( sample_screen_pos.x * 0.5 + 0.5 ) * ( image_size.x - 1 ), 
      ( sample_screen_pos.y * 0.5 + 0.5 ) * ( image_size.y - 1 )
    );
    if( sample_pos.x >= 0 && sample_pos.x < image_size.x && sample_pos.y >= 0 && sample_pos.y < image_size.y && sample_screen_pos.z > -1.0 ) {
      vec4 sample_world_pos = imageLoad( gbuffer, ivec3( sample_pos, 0 ) );
      for( int j = 0; j < 16; j++ ) {
        if( sample_screen_pos.z < sample_world_pos.w ) {
          break;
        }
        world_pos -= ray_dir * 0.01;
        sample_screen_pos = dynamic_uniforms.projection_matrix * dynamic_uniforms.camera_matrix * vec4( world_pos, 1.0 );
        sample_screen_pos /= sample_screen_pos.w;
        sample_pos = ivec2(
          ( sample_screen_pos.x * 0.5 + 0.5 ) * ( image_size.x - 1 ), 
          ( sample_screen_pos.y * 0.5 + 0.5 ) * ( image_size.y - 1 )
        );
        sample_world_pos = imageLoad( gbuffer, ivec3( sample_pos, 0 ) );
      }
      float travel_distance = distance( sample_world_pos.xyz, center );
      const vec3 sample_normal = imageLoad( gbuffer, ivec3( sample_pos, 2 ) ).xyz;
      const vec3 sample_diffuse = imageLoad( diffuse_image, sample_pos ).rgb;
      const vec3 actual_dir = normalize( sample_world_pos.xyz - center );
      env_color = sample_diffuse * 500 * 1/max( travel_distance * travel_distance, 1.0 ) * max( dot( normal, actual_dir ), 0 ) * max( dot( sample_normal, -actual_dir ), 0 );
    }
    else {
      const float travel_distance = min( distance( world_pos.xyz, center ), 20 );
      env_color = travel_distance/20.0 * dot( normal, ray_dir ) * diffuse_ambient_light( ray_dir, vec3( 1.0, 1.0, 1.0 ), roughness, metallicness );
    }
  }
  {
    normal = -normal;
    vec3 ray_dir = ( rot3 * poisson_sphere_surface[ ( int( rand1( vec2( screen_pos.yx ) ) * poisson_sphere_surface_sample_count ) + dynamic_uniforms.frame_counter / 3 ) % poisson_sphere_surface_sample_count ] );
    if( dot( normal, ray_dir ) < 0.0 ) {
      ray_dir = -ray_dir;
    }
    vec3 current_pos_in_voxel_space = center_in_voxel_space;
    const vec3 direction_in_voxel_space = normalize( ( dynamic_uniforms.voxel * vec4( center + ray_dir, 1.0 ) ).xyz - current_pos_in_voxel_space );
    for( int j = 0; j < 16; j++ ) {
      float r = texture( distance_field, current_pos_in_voxel_space ).r;
      current_pos_in_voxel_space += direction_in_voxel_space * r/8.0;
    }
    vec3 world_pos = ( dynamic_uniforms.inversed_voxel * vec4( current_pos_in_voxel_space, 1.0 ) ).xyz;
    const float travel_distance = distance( world_pos.xyz, center );
    visibility = max( 1.0/(1.0+travel_distance*travel_distance) * dot( normal, ray_dir ), 0 );
  }
  vec4 existing = imageLoad( reproject, screen_pos ).rgba;
  const uint history = min( imageLoad( src_history, screen_pos ).r, 60 );
  imageStore( dest_image, screen_pos, vec4( ( env_color + existing.rgb * history )/( history + 1 ), ( visibility + existing.a * history )/(history + 1) ) );
  imageStore( dest_history, screen_pos, uvec4( history + 1, 0, 0, 0 ) );
}

