#version 450

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_arithmetic : enable

layout (binding = 0, rgba32f) readonly uniform image2DArray gbuffer;
layout (binding = 1, rgba32f) readonly uniform image2D diffuse_image;
layout (binding = 1, rgba32f) readonly uniform image2D reproject;
layout (binding = 2, rgba32f) uniform image2D dest_image;
layout (binding = 3) uniform sampler3D distance_field;
layout (binding = 4) uniform sampler2D environment_map;
layout (binding = 6, r32ui) readonly uniform uimage2D src_history;

layout(local_size_x = 16, local_size_y = 16 ) in;

#include "constants.h"
#include "poisson_disk.h"
#include "poisson_sphere_surface.h"
#include "random.h"
#include "lighting.h"
#include "push_constants.h"

mat2 get_rotate_matrix2( float angle ) {
  float s = sin( angle );
  float c = cos( angle );
  return mat2( c, s, -s, c );
}

vec3 specular_ambient_light(
  vec3 dir,
  vec3 albedo,
  float roughness,
  float metallicness
) {
  vec3 environment_specular = textureLod( environment_map, vec2( dir.x, -dir.y ) * 0.5 + 0.5, roughness * roughness * 8.0 ).rgb * mix( vec3( 0, 0, 0 ), albedo, metallicness );
  return environment_specular;
}

mat3 get_rotate_matrix3( vec3 center ) {
  vec3 normal = normalize( center );
  vec3 guide;
  if( normal.y > 0.7071067811865475 ) {
    guide = vec3( 1.0, 0.0, 0.0 );
  }
  else {
    guide = vec3( 0.0, 1.0, 0.0 );
  }
  vec3 tangent = cross( guide, normal );
  tangent = normalize( tangent );
  vec3 binormal = cross( tangent, normal );
  return mat3( tangent, binormal, normal );
}

void main() {
  const ivec2 screen_pos = ivec2( gl_GlobalInvocationID.xy );
  const vec4 center_ = imageLoad( gbuffer, ivec3( screen_pos, 0 ) );
  vec3 normal = imageLoad( gbuffer, ivec3( screen_pos, 2 ) ).xyz;
  if( normal == vec3( 0, 0, 0 ) ) {
    imageStore( dest_image, screen_pos, vec4( 0, 0, 0, 0 ) );
    return;
  }
  const vec2 mr = imageLoad( gbuffer, ivec3( screen_pos, 4 ) ).rg;
  const float metallicness = mr.r;
  const float roughness = mr.g;
  const vec3 center = center_.xyz;
  
  const ivec3 image_size = imageSize( gbuffer );
  const ivec2 image_right_bottom = image_size.xy - ivec2( 1, 1 );
  
  const vec3 view_dir = normalize( dynamic_uniforms.eye_pos.xyz - center );
  const vec3 ray_center = normalize( reflect( view_dir, normal ) );
  vec3 center_in_voxel_space = ( dynamic_uniforms.voxel * vec4( center, 1.0 ) ).xyz;

  mat2 rot2 = get_rotate_matrix2( rand1( ray_center.xy + dynamic_uniforms.frame_counter / 36 ) * 2 * pi );
  mat3 rot3 = get_rotate_matrix3( ray_center );

  vec3 result = vec3( 0.0, 0.0, 0.0 );
  const int i = ( dynamic_uniforms.frame_counter / 3 ) % poisson_disk_sample_count;
  const vec3 offset = rot3 * vec3( ( rot2 * poisson_disk[ i ] ), 0.0 );
  const vec3 ray_dir  = normalize( mix( ray_center, offset, roughness ) );
  vec3 current_pos_in_voxel_space = center_in_voxel_space;
  const vec3 direction_in_voxel_space = normalize( ( dynamic_uniforms.voxel * vec4( center + ray_dir, 1.0 ) ).xyz - current_pos_in_voxel_space );
  current_pos_in_voxel_space += direction_in_voxel_space * 4.0/512.0;
  for( int j = 0; j < 64; j++ ) {
    float r = texture( distance_field, current_pos_in_voxel_space ).r;
    current_pos_in_voxel_space += direction_in_voxel_space * r;
  }
  vec3 world_pos = ( dynamic_uniforms.inversed_voxel * vec4( current_pos_in_voxel_space, 1.0 ) ).xyz;
  vec4 sample_screen_pos = dynamic_uniforms.projection_matrix * dynamic_uniforms.camera_matrix * vec4( world_pos, 1.0 );
  sample_screen_pos /= sample_screen_pos.w;
  ivec2 sample_pos = ivec2(
    ( sample_screen_pos.x * 0.5 + 0.5 ) * ( image_size.x - 1 ), 
    ( sample_screen_pos.y * 0.5 + 0.5 ) * ( image_size.y - 1 )
  );
  if( sample_pos.x >= 0 && sample_pos.x < image_size.x && sample_pos.y >= 0 && sample_pos.y < image_size.y && sample_screen_pos.z >= -1.0 ) {
    const vec4 sample_world_pos = imageLoad( gbuffer, ivec3( sample_pos, 0 ) );
    const vec3 sample_normal = imageLoad( gbuffer, ivec3( sample_pos, 2 ) ).xyz;
    if( sample_normal != vec3( 0, 0, 0 ) ) {
      const vec2 sample_mr = imageLoad( gbuffer, ivec3( sample_pos, 4 ) ).xy;
      const float sample_roughness = sample_mr.g;
      const float sample_metallicness = sample_mr.r;
      const vec4 sample_albedo = imageLoad( gbuffer, ivec3( sample_pos, 1 ) ).rgba;
      const vec3 sample_emissive = imageLoad( gbuffer, ivec3( sample_pos, 3 ) ).rgb;
      const float sample_shadow_level = imageLoad( gbuffer, ivec3( sample_pos, 6 ) ).r; 
      
      const vec3 N = sample_normal;
      const vec3 V = normalize( center - sample_world_pos.xyz );
      const vec3 L = normalize( dynamic_uniforms.light_pos.xyz - sample_world_pos.xyz );
      vec3 sample_diffuse = diffuse_with_mask(
        L, V, N, sample_albedo.rgb, sample_roughness, sample_metallicness, sample_emissive,
        dynamic_uniforms.light_energy,
        sample_shadow_level
      );
      vec3 sample_specular = specular_with_mask(
       L, V, N, sample_albedo.rgb, sample_roughness, sample_metallicness,
        dynamic_uniforms.light_energy,
        sample_shadow_level
      );
      result = max( max( dot( normal, -V ), 0 ) * ( sample_diffuse + sample_specular ), vec3( 0, 0, 0 ) );
    }
    else {
      float travel_distance = min( distance( world_pos.xyz, center ), 20.0 );
      result = max( travel_distance/20.0 * dot( normal, ray_dir ) * specular_ambient_light( ray_dir, vec3( 1.0, 1.0, 1.0 ), roughness, metallicness ), vec3( 0, 0, 0 ) );
    }
  }
  else {
    float travel_distance = min( distance( world_pos.xyz, center ), 20.0 );
    result = max( travel_distance/20.0 * dot( normal, ray_dir ) * specular_ambient_light( ray_dir, vec3( 1.0, 1.0, 1.0 ), roughness, metallicness ), vec3( 0, 0, 0 ) );
  }
  
  const int temporal_sample_count = int( max( 60.0 * roughness, 1.0 ) );
  vec3 existing = imageLoad( reproject, screen_pos ).rgb;
  const uint history = min( imageLoad( src_history, screen_pos ).r, temporal_sample_count );
  imageStore( dest_image, screen_pos, vec4( ( result + existing.rgb * history )/( history + 1 ), 1.0 ) );
}

