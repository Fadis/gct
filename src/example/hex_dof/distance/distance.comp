#version 460

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable
//#extension GL_KHR_shader_subgroup : enable
#extension GL_KHR_shader_subgroup_arithmetic : enable

layout (binding = 0, rgba32f) readonly uniform image2DArray gbuffer;
layout (std430, binding = 1) buffer Output {
  uint history;
  uint max_history;
  float depth;
  float znear;
  float zfar;
  float focal_distance;
  float lens_size;
  float sensor_size;
  float apeture_rotation;
} af_state;

layout(push_constant) uniform PushConstants {
  ivec2 focus_pos;
} push_constants;

layout(local_size_x = 16, local_size_y = 16 ) in;

shared float[ 8 ] temp;

float decode_depth(float d,float zNear,float zFar)
{
  return zNear * zFar / (zFar + d * (zNear - zFar));
}

float encode_depth(float d,float zNear,float zFar)
{
  return zFar * ( zNear - d )/( d * ( zNear - zFar ) );
}

void main()  {
  const ivec2 image_size = imageSize( gbuffer ).xy;
  ivec2 screen_pos = ( push_constants.focus_pos - 8 ) + ivec2( gl_GlobalInvocationID.xy );
  const uint nearest_layer = max( uint( imageLoad( gbuffer, ivec3( screen_pos, 32 ) ).x ) - 1, 0 );
  uint first_far_layer = nearest_layer;
  const float encoded_depth = imageLoad( gbuffer, ivec3( screen_pos, nearest_layer * 8 + 0 ) ).w;
  const float linear_depth = decode_depth( encoded_depth, af_state.znear, af_state.zfar );
  const float subgroup_sum = subgroupAdd( linear_depth );
  temp[ gl_SubgroupID ] = subgroup_sum;
  barrier();

  const float sum = subgroupAdd( ( gl_SubgroupInvocationID < 8 ) ? temp[ gl_SubgroupInvocationID ] : 0.0 );
  const float average_depth = sum * ( 1.0 / ( 16.0 * 16.0 ) );

  const uint history = min( af_state.history + 1, af_state.max_history );
  const float new_depth = ( average_depth + af_state.depth * ( history - 1 ) )/history;

  if( gl_GlobalInvocationID == ivec3( 0, 0, 0 ) ) {
    af_state.depth = new_depth;
    af_state.history = history;
  }
}


