#version 450

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable

layout (binding = 1) uniform sampler2D src_image;
layout (binding = 2) uniform sampler2D coc;
layout (binding = 3, rgba32f) writeonly uniform image2D dest_image0;
layout (binding = 4, rgba32f) writeonly uniform image2D dest_image1;

layout (std430, binding = 13) buffer Output {
  uint history;
  uint max_history;
  float depth;
  float znear;
  float zfar;
  float focal_distance;
  float lens_size;
  float sensor_size;
  float apeture_rotation;
} af_state;

layout(local_size_x = 16, local_size_y = 16 ) in;

#include "gauss.h"

uint get_filter_by_size( float s ) {
  return uint( 0.0983607 * ( -47.0+100.0*sqrt( max( s, 0 ) ) ) );
}

vec4 directional_blur( vec2 uv, vec2 direction ) {
  const ivec2 image_size = imageSize( dest_image0 ).xy;
  vec4 final_color = vec4( 0.0, 0.0, 0.0, 0.0 );
  float blur_amount = 0.0;
  uv += direction * 0.5;
  float len = length( direction );
  float local_coc = texture( coc, uv ).r;
  for( uint i = 0; i < 256; i++ ) {
    float weight = ( local_coc >= i ) ? 1.0 : 0.0;
    vec4 color = texture( src_image, uv + direction * i ) * weight;
    blur_amount += color.a;
    color *= color.a;
    final_color += color;
  }
  return final_color/max( blur_amount, 1.0 );
}

const float pi = 3.141592653589793;

void main() {
  const ivec2 screen_pos = ivec2( gl_GlobalInvocationID.xy );
  const uint lcpos = gl_LocalInvocationID.x;
  const uint hcpos = lcpos + gl_WorkGroupSize.x;
  const ivec2 image_size = imageSize( dest_image0 ).xy;

  const vec4 color0 = directional_blur( vec2( screen_pos ), vec2( cos( pi*90/180 + af_state.apeture_rotation ), sin( pi*90/180 + af_state.apeture_rotation ) ) );
  const vec4 color1 = directional_blur( vec2( screen_pos ), vec2( cos( pi*210/180 + af_state.apeture_rotation ), sin( pi*210/180 + af_state.apeture_rotation ) ) );

  imageStore( dest_image0, screen_pos, color0 );
  imageStore( dest_image1, screen_pos, color1 );
}

