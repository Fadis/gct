#version 450

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable

layout (binding = 0, rgba32f) readonly uniform image2DArray gbuffer;
layout (binding = 1, r32f) readonly uniform image2D occlusion;
layout (binding = 2, rgba32f) readonly uniform image2DArray diffuse_image;
layout (binding = 3, rgba32f) readonly uniform image2DArray specular_image;
layout (binding = 4, rgba32f) writeonly uniform image2DArray dest_image;
layout (binding = 5, r32f) writeonly uniform image2DArray coc_image;
layout (binding = 10, rgba32f) readonly uniform image2D scattering;

#include "push_constants.h"
#include "constants.h"

layout(binding = 11,std430) buffer MatrixPool {
  mat4 matrix_pool[];
};

struct punctual_light_parameter {
  vec4 local_position;
  vec4 world_position;
  vec4 local_direction;
  vec4 world_direction;
  vec4 energy;
  uint type;
  float light_size;
  float theta;
  float phi;
  float falloff;
  uint matrix;
  uint reserved[ 2 ];
};

layout(binding = 12,std430) buffer LightPool {
  punctual_light_parameter light_pool[];
};

layout (std430, binding = 13) buffer Output {
  uint history;
  uint max_history;
  float depth;
  float znear;
  float zfar;
  float focal_distance;
  float lens_size;
  float sensor_size;
  float apeture_rotation;
} af_state;

layout(local_size_x = 16, local_size_y = 16 ) in;

float decode_depth(float d,float zNear,float zFar)
{
  return zNear * zFar / (zFar + d * (zNear - zFar));
}

void main()  {
  const ivec2 screen_pos = ivec2( gl_GlobalInvocationID.xy );
  const ivec2 image_size = imageSize( gbuffer ).xy;
  
  uint near_layer = 5;
  uint far_layer = 5;
  float near_depth = af_state.depth;
  float far_depth = af_state.depth;
  const float far_threshold = af_state.depth - 0.1;
  {
    const bool has_layer = imageLoad( gbuffer, ivec3( screen_pos, 32 ) ).x != 0;
    const uint layer = max( uint( imageLoad( gbuffer, ivec3( screen_pos, 32 ) ).x ) - 1, 0 );
    const vec4 pos_depth = imageLoad( gbuffer, ivec3( screen_pos, layer * 8 + 0 ) );
    const vec3 normal = imageLoad( gbuffer, ivec3( screen_pos, layer * 8 + 2 ) ).xyz;
    const bool has_surface = dot( normal, normal ) != 0.0;
    const float linear_depth = decode_depth( pos_depth.w, af_state.znear, af_state.zfar );
    far_layer =
      ( has_layer && has_surface && linear_depth >= far_threshold ) ?
      layer :
      far_layer;
    far_depth =
      ( has_layer && has_surface && linear_depth >= far_threshold ) ?
      linear_depth :
      far_depth;
    near_layer =
      ( has_layer && has_surface && linear_depth < af_state.depth ) ?
      layer :
      near_layer;
    near_depth =
      ( has_layer && has_surface && linear_depth < af_state.depth ) ?
      linear_depth :
      near_depth;
  }
  {
    const bool has_layer = imageLoad( gbuffer, ivec3( screen_pos, 32 ) ).y != 0;
    const uint layer = max( uint( imageLoad( gbuffer, ivec3( screen_pos, 32 ) ).y ) - 1, 0 );
    const vec4 pos_depth = imageLoad( gbuffer, ivec3( screen_pos, layer * 8 + 0 ) );
    const vec3 normal = imageLoad( gbuffer, ivec3( screen_pos, layer * 8 + 2 ) ).xyz;
    const bool has_surface = dot( normal, normal ) != 0.0;
    const float linear_depth = decode_depth( pos_depth.w, af_state.znear, af_state.zfar );
    far_depth =
      ( has_layer && has_surface && linear_depth >= far_threshold && far_layer == 5 ) ?
      linear_depth :
      far_depth;
    far_layer =
      ( has_layer && has_surface && linear_depth >= far_threshold && far_layer == 5 ) ?
      layer :
      far_layer;
  }
  {
    const bool has_layer = imageLoad( gbuffer, ivec3( screen_pos, 32 ) ).z != 0;
    const uint layer = max( uint( imageLoad( gbuffer, ivec3( screen_pos, 32 ) ).z ) - 1, 0 );
    const vec4 pos_depth = imageLoad( gbuffer, ivec3( screen_pos, layer * 8 + 0 ) );
    const vec3 normal = imageLoad( gbuffer, ivec3( screen_pos, layer * 8 + 2 ) ).xyz;
    const bool has_surface = dot( normal, normal ) != 0.0;
    const float linear_depth = decode_depth( pos_depth.w, af_state.znear, af_state.zfar );
    far_depth =
      ( has_layer && has_surface && linear_depth >= far_threshold && far_layer == 5 ) ?
      linear_depth :
      far_depth;
    far_layer =
      ( has_layer && has_surface && linear_depth >= far_threshold && far_layer == 5 ) ?
      layer :
      far_layer;
  }
  {
    const bool has_layer = imageLoad( gbuffer, ivec3( screen_pos, 32 ) ).w != 0;
    const uint layer = max( uint( imageLoad( gbuffer, ivec3( screen_pos, 32 ) ).w ) - 1, 0 );
    const vec4 pos_depth = imageLoad( gbuffer, ivec3( screen_pos, layer * 8 + 0 ) );
    const vec3 normal = imageLoad( gbuffer, ivec3( screen_pos, layer * 8 + 2 ) ).xyz;
    const bool has_surface = dot( normal, normal ) != 0.0;
    const float linear_depth = decode_depth( pos_depth.w, af_state.znear, af_state.zfar );
    far_depth =
      ( has_layer && has_surface && linear_depth >= far_threshold && far_layer == 5 ) ?
      linear_depth :
      far_depth;
    far_layer =
      ( has_layer && has_surface && linear_depth >= far_threshold && far_layer == 5 ) ?
      layer :
      far_layer;
  }

  const vec3 near_normal = imageLoad( gbuffer, ivec3( screen_pos, near_layer * 8 + 2 ) ).xyz;
  const vec3 near_optflow = imageLoad( gbuffer, ivec3( screen_pos, near_layer * 8 + 5 ) ).xyz;
  const vec4 near_albedo = imageLoad( gbuffer, ivec3( screen_pos, near_layer * 8 + 1 ) );
  const vec3 near_ambient = global_uniforms.ambient * light_pool[ global_uniforms.light ].energy.xyz * imageLoad( occlusion, screen_pos ).r * near_albedo.rgb;
  
  const vec4 near_diffuse = imageLoad( diffuse_image, ivec3( screen_pos, near_layer ) );
  const vec3 near_specular = imageLoad( specular_image, ivec3( screen_pos, near_layer ) ).rgb;

  const vec3 far_normal = imageLoad( gbuffer, ivec3( screen_pos, far_layer * 8 + 2 ) ).xyz;
  const vec3 far_optflow = imageLoad( gbuffer, ivec3( screen_pos, far_layer * 8 + 5 ) ).xyz;
  const vec4 far_albedo = imageLoad( gbuffer, ivec3( screen_pos, far_layer * 8 + 1 ) );
  const vec3 far_ambient = global_uniforms.ambient * light_pool[ global_uniforms.light ].energy.xyz * imageLoad( occlusion, screen_pos ).r * far_albedo.rgb;
  
  const vec4 far_diffuse = imageLoad( diffuse_image, ivec3( screen_pos, far_layer ) );
  const vec3 far_specular = imageLoad( specular_image, ivec3( screen_pos, far_layer ) ).rgb;

  const vec4 scat = imageLoad( scattering, screen_pos ).rgba;
  
  const vec4 near_total = (
    ( near_layer != 5 ) ?
    vec4( ( near_ambient + ( near_diffuse.rgb + near_specular ) ) * scat.w + scat.rgb, near_albedo.a ) :
    vec4( 0.0, 0.0, 0.0, 0.0 )
  );
  
  const vec4 far_total = (
    ( far_layer != 5 ) ?
    vec4( ( far_ambient + ( far_diffuse.rgb + far_specular ) ) * scat.w + scat.rgb, far_albedo.a ) :
    vec4( 0.0, 0.0, 0.0, 0.0 )
  );
  const float near_coc = min( max( af_state.lens_size * abs( near_depth - af_state.depth )/near_depth*( af_state.focal_distance/( af_state.depth - af_state.focal_distance ) ) / af_state.sensor_size * image_size.x, 0.0 ), 128 );
  const float far_coc = min( max( af_state.lens_size * abs( far_depth - af_state.depth )/far_depth*( af_state.focal_distance/( af_state.depth - af_state.focal_distance ) ) / af_state.sensor_size * image_size.x, 0.0 ), 128 );

  imageStore( dest_image, ivec3( screen_pos, 0 ), near_total );
  imageStore( dest_image, ivec3( screen_pos, 1 ), far_total );
  imageStore( coc_image, ivec3( screen_pos, 0 ), vec4( near_coc, 0.0, 0.0, 0.0 ) );
  imageStore( coc_image, ivec3( screen_pos, 1 ), vec4( far_coc, 0.0, 0.0, 0.0 ) );
}

