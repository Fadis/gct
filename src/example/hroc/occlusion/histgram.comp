#version 460

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable
#extension GL_KHR_shader_subgroup_arithmetic : enable

layout(local_size_x = 1024, local_size_y = 1 ) in;

layout(push_constant) uniform PushConstants {
  uint n;
  uint digit;
} push_constants;

struct key_value {
  uint key;
  uint value;
};

layout(std430, binding = 0) buffer Input {
  key_value input_data[];
};

layout(std430, binding = 4) buffer Histgram {
  uint histgram[ 4 * 256 ];
};

shared uint[ 4 * 256 ] local_histgram;

void main() {
  const uint index = gl_GlobalInvocationID.x;
  uint value = 0;
  uint digit = push_constants.digit;
  local_histgram[ gl_LocalInvocationID.x ] = 0u; 
  barrier();
  if( index < push_constants.n ) {
    const uint key = input_data[ index ].key;
    uint v = key & 0xFFu;
    atomicAdd( local_histgram[ v ], 1 );
    v = ( key >> 8 ) & 0xFFu;
    atomicAdd( local_histgram[ v + 256u ], 1 );
    v = ( key >> 16 ) & 0xFFu;
    atomicAdd( local_histgram[ v + 256u * 2u ], 1 );
    v = ( key >> 24 ) & 0xFFu;
    atomicAdd( local_histgram[ v + 256u * 3u ], 1 );
  }
  barrier();
  atomicAdd( histgram[ gl_LocalInvocationID.x ], local_histgram[ gl_LocalInvocationID.x ] );
}

