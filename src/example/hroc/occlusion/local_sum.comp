#version 460

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable
#extension GL_KHR_shader_subgroup_arithmetic : enable

layout(local_size_x = 1024, local_size_y = 1 ) in;

layout(push_constant) uniform PushConstants {
  uint n;
  uint digit;
} push_constants;

struct key_value {
  uint key;
  uint value;
};

layout(std430, binding = 0) buffer Input {
  key_value input_data[];
};

layout(std430, binding = 1) buffer LocalOffset {
  uint local_offset[];
};

layout(std430, binding = 2) buffer WorkGroupOffset {
  uint workgroup_offset[];
};

shared uint[1024] cache;
shared uint[1024] outbuf;

void main() {
  const uint index = gl_GlobalInvocationID.x;
  uint value = 256;
  uint digit = push_constants.digit;
  if( index < push_constants.n ) {
    value = ( input_data[ index ].key >> ( digit * 8 ) ) & 0xFF;
  }
  cache[ gl_LocalInvocationID.x ] = value;
  barrier();

  const uint offset = gl_WorkGroupSize.x * gl_WorkGroupID.x;

  if( gl_LocalInvocationID.x < 256 ) {
    uint count = 0;
    for( uint i = 0; i != 1024; i++ ) {
      if( cache[ i ] == gl_LocalInvocationID.x ) {
        outbuf[ i ] = count;
        ++count;
      }
    }
    workgroup_offset[ gl_WorkGroupID.x * 256 + gl_LocalInvocationID.x ] = count;
  }
  barrier();
  if( index < push_constants.n ) {
    local_offset[ offset + gl_LocalInvocationID.x ] = outbuf[ gl_LocalInvocationID.x ];
  }
}

