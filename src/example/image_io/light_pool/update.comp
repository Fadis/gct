#version 460

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable
#extension GL_KHR_shader_subgroup_arithmetic : enable

layout(local_size_x = 1024, local_size_y = 1 ) in;

#include <gct/punctual_light_parameter.h>

layout(push_constant) uniform PushConstants {
  uint offset;
  uint count;
} push_constants;

layout(binding = 1,std430) buffer LightPool {
  punctual_light_parameter light[];
};

layout(binding = 2,std430) buffer MatrixPool {
  mat4 matrix[];
};

struct request_type {
  uint index;
};

layout(binding = 3,std430) buffer Request {
  request_type request[];
};

void main() {
  const uint index = gl_GlobalInvocationID.x;
  if( index < push_constants.count ) {
    const uint light_index = request[ index + push_constants.offset ].index;
    const punctual_light_parameter l = light[ light_index ];
    const mat4 m = matrix[ light[ index ].matrix ];
    vec4 world_position = m * l.local_position;
    world_position /= world_position.w;
    light[ light_index ].world_position = world_position;
    light[ light_index ].world_direction = vec4( mat3( m ) * l.local_direction.xyz, 1.0 );
  }
}

