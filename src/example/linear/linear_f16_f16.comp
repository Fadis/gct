#version 450

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_arithmetic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#extension GL_EXT_shader_subgroup_extended_types_float16 : enable

layout(local_size_x = 1024, local_size_y = 1, local_Size_z = 1 ) in;
layout(std430, binding = 0) buffer input_vector {
  float16_t input_data[];
};
layout(std430, binding = 1) buffer weight {
  float16_t weight_data[];
};
layout(std430, binding = 2) buffer output_vector {
  float16_t output_data[];
};

layout(constant_id = 1) const uint input_length = 32;

shared float16_t[32] temp;

void main() {
  const uint x = gl_GlobalInvocationID.x;
  const uint y = gl_GlobalInvocationID.y;

  float16_t sum = float16_t( 0 );
  const uint x_blocks = input_length / gl_WorkGroupSize.x + ( bool( input_length % gl_WorkGroupSize.x ) ? 1 : 0 );
  for( uint x_index = 0; x_index != x_blocks; x_index++ ) {
    const uint x_global = x_index * gl_WorkGroupSize.x + x;
    bool mask = ( x_global < input_length );
    float16_t result = float16_t( 0 );
    result = mask ? ( weight_data[ x_global + y * input_length ] * input_data[ x_global ] ) : float16_t( 0 );
    result = subgroupAdd( result );
    if( gl_SubgroupInvocationID == 0 ) {
      temp[ gl_SubgroupID ] = result;
    }
    barrier();
    mask = ( x < gl_NumSubgroups );
    result = subgroupAdd( mask ? temp[ x ] : float16_t( 0 ) );
    sum += result;
  }
  if( x == 0 ) {
    output_data[ y ] = sum;
  }
}

