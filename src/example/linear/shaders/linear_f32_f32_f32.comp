#version 450

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_arithmetic : enable
#extension GL_KHR_memory_scope_semantics : enable

layout(local_size_x = 1024, local_size_y = 1, local_size_z = 1 ) in;
layout(std430, binding = 0) buffer input_vector {
  float input_data[];
};
layout(std430, binding = 1) buffer weight {
  float weight_data[];
};
layout(std430, binding = 2) buffer output_vector {
  float output_data[];
};
layout(std430, binding = 3) buffer bias {
  float bias_data[];
};


layout(constant_id = 1) const uint input_length = 32;
layout(constant_id = 2) const uint bias_mode = 0;
layout(constant_id = 3) const float bias_value = 0.0;

shared float[32] temp;

float get_bias() {
  const uint output_index = gl_GlobalInvocationID.y;
  return
    ( bias_mode == 0 ) ?
    bias_value :
    bias_data[ output_index ];
}


void main() {
  const uint x = gl_GlobalInvocationID.x;
  const uint y = gl_GlobalInvocationID.y;
  const uint batch = gl_GlobalInvocationID.z;

  float sum = float( 0 );
  const uint x_blocks = input_length / gl_WorkGroupSize.x + ( bool( input_length % gl_WorkGroupSize.x ) ? 1 : 0 );
  for( uint x_index = 0; x_index != x_blocks; x_index++ ) {
    const uint x_global = x_index * gl_WorkGroupSize.x + x;
    const uint batch_offset = input_length * batch;
    bool mask = ( x_global < input_length );
    float result = float( 0 );
    result = mask ? ( weight_data[ x_global + y * input_length ] * input_data[ batch_offset + x_global ] ) : float( 0 );
    result = subgroupAdd( result );
    if( gl_SubgroupInvocationID == 0 ) {
      temp[ gl_SubgroupID ] = result;
    }
    barrier();
    mask = ( x < gl_NumSubgroups );
    result = subgroupAdd( mask ? temp[ x ] : float( 0 ) );
    sum += result;
  }
  if( x == 0 ) {
    const uint output_length = gl_WorkGroupSize.y * gl_NumWorkGroups.y;
    const uint batch_offset = output_length * batch;
    output_data[ batch_offset + y ] = sum + get_bias();
  }
}

