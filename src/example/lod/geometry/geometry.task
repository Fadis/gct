#version 460

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable
#extension GL_EXT_nonuniform_qualifier : enable

// メッシュシェーダー拡張を使う
#extension GL_EXT_mesh_shader : enable

// Subgroup演算拡張を使う ballot系の演算も使う
#extension GL_KHR_shader_subgroup_arithmetic : enable
#extension GL_KHR_shader_subgroup_ballot : enable

#include <gct/scene_graph.h>
#include <gct/global_uniforms.h>

// 1つのローカルワークグループには32スレッドが含まれる
layout(local_size_x = 32, local_size_y = 1 ) in;

// タスクペイロード
struct task_data {
  // 見えると判断されたメッシュレットのID
  // 最大32個だがメッシュレット32個毎にローカルワークグループを分けてあるので問題ない
  uint meshlet_index[ 32 ];
  // ローカル座標系からワールド座標系への変換行列
  mat4 l2w;
  // ローカル座標系からスクリーン座標系への変換行列
  mat4 l2s;
  // 使用するLoDレベルの情報のID
  uint instance_id;
  // 使用するメッシュのID
  uint primitive_id;
};
taskPayloadSharedEXT task_data td;

void main() {
  // 描画対象のIDの配列から1要素取り出す
  // タスクシェーダーのn番目のローカルワークグループはn番目の要素を取り出す
  const resource_pair_type id = resource_pair[ push_constants.instance + gl_GlobalInvocationID.y ];
  // メッシュが属すノードの情報を得る
  instance_resource_index_type inst = instance_resource_index[ id.inst ];

  // ローカル座標系からワールド座標系への変換行列 
  const mat4 l2w = matrix_pool[ inst.world_matrix ];
  // ワールド座標系からスクリーン座標系への変換行列
  const mat4 w2s =
    matrix_pool[ global_uniforms.projection_matrix ] *
    matrix_pool[ global_uniforms.camera_matrix ];
  // ローカル座標系からスクリーン座標系への変換行列
  const mat4 l2s =
    w2s *
    l2w;
  // 変換行列をタスクペイロードに書く
  td.l2w = l2w;
  td.l2s = l2s;

  // メッシュを内包するローカル座標系でのAABBを得る
  const aabb_type aabb = aabb_pool[ inst.aabb ];

  // ローカル座標系でのAABBをスクリーン座標系でのAABBに変換する
  const aabb_type screen_space_aabb = transform_aabb( l2s, aabb );

  // スクリーン座標系でのAABBのx方向とy方向の大きさを求める
  const vec2 screen_space_size_xy = screen_space_aabb.max.xy - screen_space_aabb.min.xy;
  // スクリーン座標系でのAABBのxy平面に投影した時の面積を求める
  const float screen_space_size = screen_space_size_xy.x * screen_space_size_xy.y * 0.25;

  // とりあえずLoD0の情報を読む
  uint lod_id = 0u;
  inst = instance_resource_index[ id.inst + lod_id ];
  // 現座のLoDレベルが最も荒いLoDレベルでなく、スクリーン座標系でのAABBの面積がLoDレベルの閾値より小さい間
  while( inst.lowest_lod == 0 && inst.coverage >= screen_space_size ) {
    // LoDレベルを1段階荒くする
    lod_id++;
    // 荒いLoDレベルの情報を読み直す
    inst = instance_resource_index[ id.inst + lod_id ];
  }

  // オクルージョンカリングの結果(メッシュが見える位置にあるかどうか)を得る
  const uint visibility = last_visibility_pool[ inst.visibility ];
  
  uint visible_invocation_count = 0u;
  // メッシュが見える位置にある場合
  if( visibility != 0u ) {
    // メッシュの情報を取得する
    const primitive_resource_index_type prim = primitive_resource_index[ inst.prim ];
    const mesh_type mesh = mesh_pool[ prim.mesh ];
    
    // メッシュの頂点数を96で割ってメッシュレットの数を求める
    const uint invocation_count = mesh.vertex_count / ( 32 * 3 ) + ( ( mesh.vertex_count % ( 32 * 3 ) == 0 ) ? 0u : 1u );
    // このスレッドが処理するメッシュレットのIDを求める
    const uint task_offset = id.offset;
    const uint meshlet_id = gl_LocalInvocationID.x + 32u * task_offset;

    {
      // メッシュレットIDがメッシュレットの総数を超えていないか
      const bool has_meshlet = ( meshlet_id < invocation_count );
      // メッシュレットの情報(法錐と頂点座標の平均)を得る
      const meshlet_type meshlet = meshlet_pool[ mesh.meshlet + ( has_meshlet ? meshlet_id : 0u ) ];

      // メッシュレットの頂点座標の平均
      const vec4 bv0 = vec4( meshlet.center.xyz, 1.0 );
      // メッシュレットの頂点座標の平均を中心とし、メッシュレットの頂点を全て内包する球の表面に位置する点
      const vec4 bv1 = bv0 + vec4( meshlet.center.w, 0, 0, 0 );
      const vec4 bv2 = bv0 + vec4( 0, meshlet.center.w, 0, 0 );
      const vec4 bv3 = bv0 + vec4( 0, 0, meshlet.center.w, 0 );
      // 球の表面の点をスクリーン座標系に変換
      vec4 sbv0 = l2s * bv0;
      vec4 sbv1 = l2s * bv1;
      vec4 sbv2 = l2s * bv2;
      vec4 sbv3 = l2s * bv3;
      sbv0 /= sbv0.w;
      sbv1 /= sbv1.w;
      sbv2 /= sbv2.w;
      sbv3 /= sbv3.w;
      // スクリーン座標系でメッシュレットの全ての頂点を内包する球の半径を求める
      const float radius = max(
        distance( sbv0, sbv1 ),
        max(
          distance( sbv0, sbv2 ),
          distance( sbv0, sbv3 )
        )
      );
      // 求めた球がクリッピング空間の内側と重なっているかどうかを調べる
      // 重なっていなければそのメッシュレットに含まれる全てのプリミティブは見えない
      const bool inside_of_frustum =
        ( ( sbv0.x < 0.0 ) ? ( sbv0.x + radius >= -1.0 ) : ( sbv0.x - radius <= 1.0 ) ) &&
        ( ( sbv0.y < 0.0 ) ? ( sbv0.y + radius >= -1.0 ) : ( sbv0.y - radius <= 1.0 ) ) &&
        ( ( sbv0.z < 0.0 ) ? ( sbv0.z + radius >= -1.0 ) : ( sbv0.z - radius <= 1.0 ) );

      // 視錐台カリングの結果と背面カリングの結果の両方で見えると判断された場合見える事にする
      const bool visible = ( has_meshlet && inside_of_frustum && ( prim.cull == 0 || ( dot( normalize( ( l2w * vec4( meshlet.normal.xyz, 1.0 ) ).xyz ), normalize( global_uniforms.eye_pos.xyz - meshlet.center.xyz ) ) >= meshlet.normal.w ) ) );
      // 各スレッドがメッシュレットが見えると判断したかどうかを集める    
      const uvec4 visible_bits = subgroupBallot( visible );
      // このスレッドよりスレッドIDが小さいスレッドの中でメッシュレットが見えると判断したスレッドの数
      const uint offset = subgroupBallotExclusiveBitCount( visible_bits );
      // ローカルワークグループの中でメッシュレットが見えると判断したスレッドの数
      const uint total = subgroupBallotBitCount( visible_bits );
      // メッシュレットが見える可能性があったら
      if( visible ) {
        // タスクペイロードにメッシュレットのIDを記録
        td.meshlet_index[ offset ] = meshlet_id;
      }
      // 見えると判断されたメッシュレットの数を実行しなければならないメッシュシェーダーのローカルワークグループの数にする
      visible_invocation_count = total;
    }
    // 使用するLoDレベルの情報のIDをタスクペイロードに書く
    td.instance_id = id.inst + lod_id;
    // 使用するメッシュのIDをタスクペイロードに書く
    td.primitive_id = inst.prim;
  }
  // 見える可能性があるメッシュレットの数だけメッシュシェーダーを実行する
  EmitMeshTasksEXT( visible_invocation_count, 1, 1 );
}

