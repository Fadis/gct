#version 460

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable
#extension GL_EXT_nonuniform_qualifier : enable

// メッシュシェーダー拡張を使う
#extension GL_EXT_mesh_shader : enable

// 8bit、16bitの値のバッファを読めるようにする拡張を使う
// 頂点バッファをシェーダーから読むのに使う
#extension GL_EXT_shader_16bit_storage : enable
#extension GL_EXT_shader_8bit_storage : enable

#define GCT_ENABLE_8BIT_16BIT_STORAGE
#include <gct/scene_graph.h>
#include <gct/global_uniforms.h>
#include <gct/scene_graph/accessor.h>

// 1つのローカルワークグループには32スレッドが含まれる
layout(local_size_x = 32, local_size_y = 1 ) in;

// 1つのローカルワークグループから最大で96頂点32プリミティブの三角形を出力する
layout(triangles, max_vertices = 96, max_primitives = 32) out;

// 頂点属性
layout (location = 0) out vec4 output_position[]; // 頂点座標

// タスクペイロード
struct task_data {
  // ノードにぶら下がるメッシュの情報を指すID
  uint instance_id;
  // メッシュの情報を指すID
  uint primitive_id;
  // このローカルワークグループが担当するメッシュレットのオフセット
  uint task_offset;
};
taskPayloadSharedEXT task_data td;

void main() {
  // メッシュの情報を得る
  instance_resource_index_type inst = instance_resource_index[ td.instance_id ];
  const primitive_resource_index_type prim = primitive_resource_index[ td.primitive_id ];
  const mesh_type mesh = mesh_pool[ prim.mesh ];

  // メッシュレットの最大頂点数(32*3=96)
  const uint max_vertex_count = gl_WorkGroupSize.x * 3u;

  // n番目のローカルワークグループがn個目のメッシュレットを処理する
  const uint meshlet_id = gl_WorkGroupID.x + 32u * td.task_offset;
  // メッシュの頂点数からこのメッシュレットの頂点数を求める
  // 端数の頂点を扱う最後のメッシュレット以外では96頂点になる
  const uint vertex_count = min( mesh.vertex_count - meshlet_id * max_vertex_count, max_vertex_count );
  
  // スレッドが担当するプリミティブが存在するかを調べる
  // 端数の頂点を扱う最後のメッシュレットではスレッド数より少ない数のプリミティブしかない可能性がある
  const uint primitive_id = gl_LocalInvocationID.x;
  const uint vertex_id = primitive_id * 3u;
  const bool in_range = vertex_count > vertex_id;
  
  // このスレッドが処理すべき3つの頂点の最初の要素までのオフセットを求める
  const uint input_primitive_id = meshlet_id * 32u + primitive_id;
  
  // スレッドが担当するプリミティブが存在する場合頂点配列から頂点の情報を読む
  const vertex_attribute v0 = in_range ? read_vertex_attribute( mesh, input_primitive_id * 3u + 0u ) : null_attr;
  const vertex_attribute v1 = in_range ? read_vertex_attribute( mesh, input_primitive_id * 3u + 1u ) : null_attr;
  const vertex_attribute v2 = in_range ? read_vertex_attribute( mesh, input_primitive_id * 3u + 2u ) : null_attr;
 
  // 必要な数の頂点とプリミティブを書けるようにする
  SetMeshOutputsEXT( vertex_count, vertex_count / 3 );

 
  // 自身の担当するプリミティブが見えないと判断されたスレッドは即座に終了する
  if( vertex_count <= vertex_id ) return; 

  // 頂点のスクリーン座標系での座標としてテクスチャ座標を出力先に書く
  gl_MeshVerticesEXT[ vertex_id ].gl_Position = vec4( v0.tex_coord0.xy * 2.0 - 1.0, 0.0, 1.0 );
  gl_MeshVerticesEXT[ vertex_id + 1u ].gl_Position = vec4( v1.tex_coord0.xy * 2.0 - 1.0, 0.0, 1.0 );
  gl_MeshVerticesEXT[ vertex_id + 2u ].gl_Position = vec4( v2.tex_coord0.xy * 2.0 - 1.0, 0.0, 1.0 );
  // 頂点のローカル座標系での座標を出力先に書く
  output_position[ vertex_id ] = v0.position;
  output_position[ vertex_id + 1u ] = v1.position;
  output_position[ vertex_id + 2u ] = v2.position;
  // 上の3頂点で1つの三角形プリミティブになる事を書く
  gl_PrimitiveTriangleIndicesEXT[ vertex_id / 3 ] = uvec3( vertex_id, vertex_id + 1, vertex_id + 2 );
}

