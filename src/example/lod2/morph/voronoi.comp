#version 460

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_shader_image_load_formatted : enable

#define GCT_USE_IMAGE_POOL_WITHOUT_FORMAT

layout(local_size_x = 16, local_size_y = 16 ) in;

#include <gct/scene_graph/image_pool.h>
#include <gct/encode_pos.h>
#include <gct/get_neighbor.h>

layout(push_constant) uniform PushConstants {
  uint dest;
  uint distance;
} push_constants;

void main()  {
  const ivec2 image_size = imageSize( image_pool_2dua[ nonuniformEXT( push_constants.dest ) ] );
  const ivec2 pos = ivec2( gl_GlobalInvocationID.xy );
  const uint index = gl_GlobalInvocationID.z;
  if( pos.x >= image_size.x ) return;
  if( pos.y >= image_size.y ) return;
  const ivec2 target = get_neighbor( pos, push_constants.distance, index );
  if( target.x >= image_size.x ) return;
  if( target.y >= image_size.y ) return;
  
  const uint center_encoded = imageLoad( image_pool_2dua[ nonuniformEXT( push_constants.dest ) ], pos ).x;
  if( decode_pos_empty( center_encoded ) ) return;
  const ivec2 center = decode_pos_2d( center_encoded );

  uint existing_encoded = imageLoad( image_pool_2dua[ nonuniformEXT( push_constants.dest ) ], target ).x;
  for( uint retry = 0; retry != 16; retry++ ) {
    if( decode_pos_empty( existing_encoded ) ) {
      const uint result = imageAtomicCompSwap( image_pool_2dua[ nonuniformEXT( push_constants.dest ) ], target, existing_encoded, center_encoded );
      if( result == existing_encoded ) return;
      existing_encoded = result;
    }
    else {
      const ivec2 existing = decode_pos_2d( existing_encoded );
      const float d_old = distance( vec2( existing ), vec2( target ) );
      const float d_new = distance( vec2( center ), vec2( target ) );
      if( d_old <= d_new ) return;
      const uint result = imageAtomicCompSwap( image_pool_2dua[ nonuniformEXT( push_constants.dest ) ], target, existing_encoded, center_encoded );
      if( result == existing_encoded ) return;
      existing_encoded = result;
    }
  }
}

