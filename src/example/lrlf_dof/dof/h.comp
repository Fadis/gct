#version 450

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable
#extension GL_EXT_nonuniform_qualifier : enable

layout(local_size_x = 128, local_size_y = 1 ) in;

#include <gct/constants.h>
#include <gct/scene_graph/image_pool.h>
#include <gct/filter_cache.h>

layout(push_constant) uniform PushConstants {
  uint src;
  uint partial0;
  uint partial1;
  uint partial2;
  uint partial3;
  uint partial4;
  uint coc;
} push_constants;

int lrlfilter_size = 65;
// 特異値分解で求めた分離可能なフィルタのパラメータ
float lrlfilter0[65*33] = float[](
#include "h0.inc"
);
float lrlfilter1[65*33] = float[](
#include "h1.inc"
);
float lrlfilter2[65*33] = float[](
#include "h2.inc"
);
float lrlfilter3[65*33] = float[](
#include "h3.inc"
);
float lrlfilter4[65*33] = float[](
#include "h4.inc"
);

const int kernel_size = 32;
shared vec4[gl_WorkGroupSize.x+kernel_size*2+1] cache;

void main() {
  const ivec2 screen_pos = ivec2( gl_GlobalInvocationID.xy );
  const uint layer = gl_GlobalInvocationID.z;
  const uint lcpos = gl_LocalInvocationID.x;
  const uint hcpos = lcpos + gl_WorkGroupSize.x;
  const ivec2 image_size = imageSize( image_pool16f_array[ nonuniformEXT( push_constants.src ) ] ).xy;
  const ivec4 sample_pos = horizontal_filter_cache_pos( screen_pos, image_size, gl_WorkGroupSize.x, kernel_size );
  // 横256ピクセルのフィルタを計算するのに必要な範囲のピクセルとCoCを共有メモリにロードする
  cache[ lcpos ] = imageLoad( image_pool16f_array[ nonuniformEXT( push_constants.src ) ], ivec3( sample_pos.xy, layer ) );
  if( hcpos < gl_WorkGroupSize.x+kernel_size*2+1 ) {
    cache[ hcpos ] = imageLoad( image_pool16f_array[ nonuniformEXT( push_constants.src ) ], ivec3( sample_pos.zw, layer ) );
  }
  barrier();
  vec4 sum0 = vec4( 0.0, 0.0, 0.0, 0.0 );
  vec4 sum1 = vec4( 0.0, 0.0, 0.0, 0.0 );
  vec4 sum2 = vec4( 0.0, 0.0, 0.0, 0.0 );
  vec4 sum3 = vec4( 0.0, 0.0, 0.0, 0.0 );
  vec4 sum4 = vec4( 0.0, 0.0, 0.0, 0.0 );
  const uint coc_level = uint( max( imageLoad( image_pool16f_array[ nonuniformEXT( push_constants.coc ) ], ivec3( screen_pos, layer ) ).r, 0.0 ) );
  const uint coc_ = coc_level * lrlfilter_size;
  for( uint i = 0; i != lrlfilter_size; i++ ) {
    // CoCの大きさに対応する係数を使ってフィルタをかける
    sum0 += cache[ lcpos + i ] * lrlfilter0[ i + coc_ ];
    sum1 += cache[ lcpos + i ] * lrlfilter1[ i + coc_ ];
    sum2 += cache[ lcpos + i ] * lrlfilter2[ i + coc_ ];
    sum3 += cache[ lcpos + i ] * lrlfilter3[ i + coc_ ];
    sum4 += cache[ lcpos + i ] * lrlfilter4[ i + coc_ ];
  }
  imageStore( image_pool16f_array[ nonuniformEXT( push_constants.partial0 ) ], ivec3( screen_pos, layer ), sum0 );
  imageStore( image_pool16f_array[ nonuniformEXT( push_constants.partial1 ) ], ivec3( screen_pos, layer ), sum1 );
  imageStore( image_pool16f_array[ nonuniformEXT( push_constants.partial2 ) ], ivec3( screen_pos, layer ), sum2 );
  imageStore( image_pool16f_array[ nonuniformEXT( push_constants.partial3 ) ], ivec3( screen_pos, layer ), sum3 );
  imageStore( image_pool16f_array[ nonuniformEXT( push_constants.partial4 ) ], ivec3( screen_pos, layer ), sum4 );
}

