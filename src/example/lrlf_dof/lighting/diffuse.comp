#version 450

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable
#extension GL_EXT_nonuniform_qualifier : enable

layout(local_size_x = 16, local_size_y = 16 ) in;

#include <gct/constants.h>
#include <gct/global_uniforms.h>
#include <gct/lighting.h>
#include <gct/scene_graph/image_pool.h>
#include <gct/scene_graph/texture_pool.h>
#include <gct/scene_graph/light_pool.h>
#include <gct/scene_graph/k+buffer.h>

layout(push_constant) uniform PushConstants {
  uint src;
  uint dest;
} push_constants;

void main()  {
  const ivec2 screen_pos = ivec2( gl_GlobalInvocationID.xy );
  const uint layer = gl_GlobalInvocationID.z;
  const gbuffer_value p = read_kplus_buffer( push_constants.src, screen_pos, layer );
  if( p.albedo.a == 0.0 ) {
    imageStore( image_pool16f_array[ nonuniformEXT( push_constants.dest ) ], ivec3( screen_pos, layer ), vec4( 0.0, 0.0, 0.0, 1.0 ) );
    return;
  }
 
  const vec3 V = normalize(global_uniforms.eye_pos.xyz-p.pos);
  const vec3 L = normalize(light_pool[global_uniforms.light].world_position.xyz-p.pos);

  vec3 diffuse = diffuse_with_mask(
    L, V, p.normal, p.albedo.rgb, p.roughness, p.metallic, p.emissive,
    light_pool[global_uniforms.light].energy.xyz,
    p.shadow_level.x
  );
  imageStore( image_pool16f_array[ nonuniformEXT( push_constants.dest ) ], ivec3( screen_pos, layer ), vec4( diffuse, p.albedo.a ) );
}

