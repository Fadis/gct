#version 450

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable

layout (binding = 0, rgba32f) readonly uniform image2DArray gbuffer;
layout (binding = 1, r32f) readonly uniform image2D occlusion;
layout (binding = 2, rgba32f) readonly uniform image2DArray diffuse_image;
layout (binding = 3, rgba32f) readonly uniform image2DArray specular_image;
layout (binding = 4, rgba32f) writeonly uniform image2DArray dest_image;
layout (binding = 5, r32f) writeonly uniform image2DArray coc_image;
layout (binding = 10, rgba32f) readonly uniform image2D scattering;

#include "push_constants.h"

layout(binding = 11,std430) buffer MatrixPool {
  mat4 matrix_pool[];
};

#include <gct/depth.h>
#include <gct/punctual_light_parameter.h>

layout(binding = 12,std430) buffer LightPool {
  punctual_light_parameter light_pool[];
};

layout (std430, binding = 13) buffer Output {
  uint history;
  uint max_history;
  float depth;
  float znear;
  float zfar;
  float focal_distance;
  float lens_size;
  float sensor_size;
  float apeture_rotation;
  float visible_range;
} af_state;

layout(local_size_x = 16, local_size_y = 16 ) in;

void main()  {
  const ivec2 screen_pos = ivec2( gl_GlobalInvocationID.xy );
  const ivec2 image_size = imageSize( gbuffer ).xy;
  
  const float far_threshold = af_state.depth;
  
  vec4 layer_index = imageLoad( gbuffer, ivec3( screen_pos, 32 ) );
  
  const vec4 scat = imageLoad( scattering, screen_pos ).rgba;

  const float l0_depth =
    ( layer_index.x != 0 ) ?
    decode_depth(
      imageLoad( gbuffer, ivec3( screen_pos, ( uint( layer_index.x ) - 1 ) * 8 + 0 ) ).w,
      af_state.znear, af_state.zfar
    ) :
    af_state.zfar;
  const float l1_depth =
    ( layer_index.y != 0 ) ?
    decode_depth(
      imageLoad( gbuffer, ivec3( screen_pos, ( uint( layer_index.y ) - 1 ) * 8 + 0 ) ).w,
      af_state.znear, af_state.zfar
    ) :
    af_state.zfar;
  const float l2_depth =
    ( layer_index.z != 0 ) ?
    decode_depth(
      imageLoad( gbuffer, ivec3( screen_pos, ( uint( layer_index.z ) - 1 ) * 8 + 0 ) ).w,
      af_state.znear, af_state.zfar
    ) :
    af_state.zfar;
  const float l3_depth =
    ( layer_index.w != 0 ) ?
    decode_depth(
      imageLoad( gbuffer, ivec3( screen_pos, ( uint( layer_index.w ) - 1 ) * 8 + 0 ) ).w,
      af_state.znear, af_state.zfar
    ) :
    af_state.zfar;

  const vec4 l0_albedo =
    ( layer_index.x != 0 ) ?
    imageLoad( gbuffer, ivec3( screen_pos, max( uint( layer_index.x ) - 1, 0 ) * 8 + 1 ) ) :
    vec4( 0.0, 0.0, 0.0, 0.0 );
  const vec4 l1_albedo =
    ( layer_index.y != 0 ) ?
    imageLoad( gbuffer, ivec3( screen_pos, max( uint( layer_index.y ) - 1, 0 ) * 8 + 1 ) ) :
    vec4( 0.0, 0.0, 0.0, 0.0 );
  const vec4 l2_albedo =
    ( layer_index.z != 0 ) ?
    imageLoad( gbuffer, ivec3( screen_pos, max( uint( layer_index.z ) - 1, 0 ) * 8 + 1 ) ) :
    vec4( 0.0, 0.0, 0.0, 0.0 );
  const vec4 l3_albedo =
    ( layer_index.w != 0 ) ?
    imageLoad( gbuffer, ivec3( screen_pos, max( uint( layer_index.w ) - 1, 0 ) * 8 + 1 ) ) :
    vec4( 0.0, 0.0, 0.0, 0.0 );

  const vec3 l0_ambient =
    global_uniforms.ambient *
    light_pool[ global_uniforms.light ].energy.xyz *
    imageLoad( occlusion, screen_pos ).r *
    l0_albedo.xyz;
  const vec3 l1_ambient =
    global_uniforms.ambient *
    light_pool[ global_uniforms.light ].energy.xyz *
    l1_albedo.xyz;
  const vec3 l2_ambient =
    global_uniforms.ambient *
    light_pool[ global_uniforms.light ].energy.xyz *
    l2_albedo.xyz;
  const vec3 l3_ambient =
    global_uniforms.ambient *
    light_pool[ global_uniforms.light ].energy.xyz *
    l2_albedo.xyz;

  const vec3 l0_diffuse =
    ( layer_index.x != 0 ) ?
    imageLoad( diffuse_image, ivec3( screen_pos, max( uint( layer_index.x ) - 1, 0 ) ) ).xyz :
    vec3( 0.0, 0.0, 0.0 );
  const vec3 l1_diffuse =
    ( layer_index.y != 0 ) ?
    imageLoad( diffuse_image, ivec3( screen_pos, max( uint( layer_index.y ) - 1, 0 ) ) ).xyz :
    vec3( 0.0, 0.0, 0.0 );
  const vec3 l2_diffuse =
    ( layer_index.z != 0 ) ?
    imageLoad( diffuse_image, ivec3( screen_pos, max( uint( layer_index.z ) - 1, 0 ) ) ).xyz :
    vec3( 0.0, 0.0, 0.0 );
  const vec3 l3_diffuse =
    ( layer_index.w != 0 ) ?
    imageLoad( diffuse_image, ivec3( screen_pos, max( uint( layer_index.w ) - 1, 0 ) ) ).xyz :
    vec3( 0.0, 0.0, 0.0 );

  const vec3 l0_specular =
    ( layer_index.x != 0 ) ?
    imageLoad( specular_image, ivec3( screen_pos, max( uint( layer_index.x ) - 1, 0 ) ) ).xyz :
    vec3( 0.0, 0.0, 0.0 );
  const vec3 l1_specular =
    ( layer_index.y != 0 ) ?
    imageLoad( specular_image, ivec3( screen_pos, max( uint( layer_index.y ) - 1, 0 ) ) ).xyz :
    vec3( 0.0, 0.0, 0.0 );
  const vec3 l2_specular =
    ( layer_index.z != 0 ) ?
    imageLoad( specular_image, ivec3( screen_pos, max( uint( layer_index.z ) - 1, 0 ) ) ).xyz :
    vec3( 0.0, 0.0, 0.0 );
  const vec3 l3_specular =
    ( layer_index.w != 0 ) ?
    imageLoad( specular_image, ivec3( screen_pos, max( uint( layer_index.w ) - 1, 0 ) ) ).xyz :
    vec3( 0.0, 0.0, 0.0 );

  const vec4 l0_total = 
    vec4( ( l0_ambient + ( l0_diffuse.rgb + l0_specular ) ) * scat.w + scat.rgb, l0_albedo.a );
  const vec4 l1_total = 
    vec4( ( l1_ambient + ( l1_diffuse.rgb + l1_specular ) ) * scat.w + scat.rgb, l1_albedo.a );
  const vec4 l2_total = 
    vec4( ( l2_ambient + ( l2_diffuse.rgb + l2_specular ) ) * scat.w + scat.rgb, l2_albedo.a );
  const vec4 l3_total = 
    vec4( ( l3_ambient + ( l3_diffuse.rgb + l3_specular ) ) * scat.w + scat.rgb, l3_albedo.a );

  vec4 near_total = vec4( 0.0, 0.0, 0.0, 0.0 );
  near_total =
    vec4( mix( near_total.xyz, l3_total.xyz, l3_albedo.a ), ( l3_depth < far_threshold ) ? 1.0 - ( ( 1.0 - near_total.a ) * ( 1.0 - l3_albedo.a ) ) : near_total.a );
  near_total =
    vec4( mix( near_total.xyz, l2_total.xyz, l2_albedo.a ), ( l2_depth < far_threshold ) ? 1.0 - ( ( 1.0 - near_total.a ) * ( 1.0 - l2_albedo.a ) ) : near_total.a );
  near_total =
    vec4( mix( near_total.xyz, l1_total.xyz, l1_albedo.a ), ( l1_depth < far_threshold ) ? 1.0 - ( ( 1.0 - near_total.a ) * ( 1.0 - l1_albedo.a ) ) : near_total.a );
  near_total =
    vec4( mix( near_total.xyz, l0_total.xyz, l0_albedo.a ), ( l0_depth < far_threshold ) ? 1.0 - ( ( 1.0 - near_total.a ) * ( 1.0 - l0_albedo.a ) ) : near_total.a );

  float near_depth = af_state.depth;
  near_depth = min( l3_depth, near_depth );
  near_depth = min( l2_depth, near_depth );
  near_depth = min( l1_depth, near_depth );
  near_depth = min( l0_depth, near_depth );
  near_depth = min( af_state.depth, near_depth + af_state.visible_range );

  vec4 far_total = vec4( 0.0, 0.0, 0.0, 0.0 );
  far_total = vec4( mix( near_total.xyz, l3_total.xyz, l3_albedo.a ), 1.0 - ( ( 1.0 - near_total.a ) * ( 1.0 - l3_albedo.a ) ) );
  far_total = vec4( mix( near_total.xyz, l2_total.xyz, l2_albedo.a ), 1.0 - ( ( 1.0 - near_total.a ) * ( 1.0 - l2_albedo.a ) ) );
  far_total = vec4( mix( near_total.xyz, l1_total.xyz, l1_albedo.a ), 1.0 - ( ( 1.0 - near_total.a ) * ( 1.0 - l1_albedo.a ) ) );
  far_total = vec4( mix( near_total.xyz, l0_total.xyz, l0_albedo.a ), 1.0 - ( ( 1.0 - near_total.a ) * ( 1.0 - l0_albedo.a ) ) );
  float far_depth = af_state.zfar;
  far_depth = min( ( l3_depth ), far_depth );
  far_depth = min( ( l2_depth ), far_depth );
  far_depth = min( ( l1_depth ), far_depth );
  far_depth = min( ( l0_depth ), far_depth );
  far_depth = max( af_state.depth, far_depth - af_state.visible_range );

  near_total.rgb = ( near_total.a == 0.0 ) ? far_total.rgb : near_total.rgb;
  
  const float near_coc = min( max( ( af_state.lens_size * abs( near_depth - af_state.depth )/( near_depth )*( af_state.focal_distance/( af_state.depth - af_state.focal_distance ) ) / af_state.sensor_size * image_size.x - 0.0 ), 0.0 ), 32.0 );
  const float far_coc = min( max( ( af_state.lens_size * abs( far_depth - af_state.depth )/( far_depth )*( af_state.focal_distance/( af_state.depth - af_state.focal_distance ) ) / af_state.sensor_size * image_size.x - 0.0 ), 0.0 ), 32.0 );
 
  imageStore( dest_image, ivec3( screen_pos, 0 ), near_total );
  imageStore( dest_image, ivec3( screen_pos, 1 ), far_total );
  imageStore( coc_image, ivec3( screen_pos, 0 ), vec4( near_coc, 0.0, 0.0, 0.0 ) );
  imageStore( coc_image, ivec3( screen_pos, 1 ), vec4( far_coc, 0.0, 0.0, 0.0 ) );
}

