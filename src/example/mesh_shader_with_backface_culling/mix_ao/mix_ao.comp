#version 450

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_shader_image_load_formatted : enable

#define GCT_USE_IMAGE_POOL_WITHOUT_FORMAT

layout(local_size_x = 16, local_size_y = 16 ) in;

#include <gct/constants.h>
#include <gct/global_uniforms.h>
#include <gct/scene_graph/image_pool.h>
#include <gct/scene_graph/light_pool.h>
#include <gct/scene_graph/k+buffer.h>

layout(push_constant) uniform PushConstants {
  uint gbuffer;
  uint depth;
  uint occlusion;
  uint lighting_image;
  uint scattering;
  uint dest_image;
  uint coc_image;
} push_constants;

#include <gct/depth.h>

layout (std430, binding = 13) buffer Output {
  uint history;
  uint max_history;
  float depth;
  float znear;
  float zfar;
  float focal_distance;
  float lens_size;
  float sensor_size;
  float apeture_rotation;
  float visible_range;
} af_state;

layout(local_size_x = 16, local_size_y = 16 ) in;

void main()  {
  const ivec2 screen_pos = ivec2( gl_GlobalInvocationID.xy );
  const vec2 scale =
    vec2(imageSize( image_pool_2d_array[ nonuniformEXT( push_constants.gbuffer ) ] ).xy) /
    vec2(imageSize( image_pool_2d_array[ nonuniformEXT( push_constants.dest_image ) ] ).xy);
  const ivec2 src_pos = ivec2( screen_pos * scale );
  const ivec2 image_size = imageSize( image_pool_2d_array[ nonuniformEXT( push_constants.dest_image ) ] ).xy;
  
  const float far_threshold = af_state.depth;

  vec4 layer_index = imageLoad( image_pool_2d_array[ nonuniformEXT( push_constants.gbuffer ) ], ivec3( src_pos, 32 ) );

  const float depth[4] = float[](
    read_kplus_buffer_depth( push_constants.depth, src_pos, 0 ),
    read_kplus_buffer_depth( push_constants.depth, src_pos, 1 ),
    read_kplus_buffer_depth( push_constants.depth, src_pos, 2 ),
    read_kplus_buffer_depth( push_constants.depth, src_pos, 3 )
  );
  
  const vec4 albedo[4] = vec4[](
    read_kplus_buffer_albedo( push_constants.gbuffer, src_pos, 0 ),
    read_kplus_buffer_albedo( push_constants.gbuffer, src_pos, 1 ),
    read_kplus_buffer_albedo( push_constants.gbuffer, src_pos, 2 ),
    read_kplus_buffer_albedo( push_constants.gbuffer, src_pos, 3 )
  );

  const float l0_depth =
    ( layer_index.x != 0 ) ?
    decode_depth( depth[ uint( layer_index.x ) - 1 ], af_state.znear, af_state.zfar ) :
    af_state.zfar;
  const float l1_depth =
    ( layer_index.y != 0 ) ?
    decode_depth( depth[ uint( layer_index.y ) - 1 ], af_state.znear, af_state.zfar ) :
    af_state.zfar;
  const float l2_depth =
    ( layer_index.z != 0 ) ?
    decode_depth( depth[ uint( layer_index.z ) - 1 ], af_state.znear, af_state.zfar ) :
    af_state.zfar;
  const float l3_depth =
    ( layer_index.w != 0 ) ?
    decode_depth( depth[ uint( layer_index.w ) - 1 ], af_state.znear, af_state.zfar ) :
    af_state.zfar;

  const vec4 l0_albedo =
    ( layer_index.x != 0 ) ? albedo[ uint( layer_index.x ) - 1 ] : vec4( 0.0, 0.0, 0.0, 0.0 );
  const vec4 l1_albedo =
    ( layer_index.y != 0 ) ? albedo[ uint( layer_index.y ) - 1 ] : vec4( 0.0, 0.0, 0.0, 0.0 );
  const vec4 l2_albedo =
    ( layer_index.z != 0 ) ? albedo[ uint( layer_index.z ) - 1 ] : vec4( 0.0, 0.0, 0.0, 0.0 );
  const vec4 l3_albedo =
    ( layer_index.w != 0 ) ? albedo[ uint( layer_index.w ) - 1 ] : vec4( 0.0, 0.0, 0.0, 0.0 );

  const vec2 occlusion_scale =
    vec2(imageSize( image_pool_2d_array[ nonuniformEXT( push_constants.occlusion ) ] ).xy) /
    vec2(imageSize( image_pool_2d_array[ nonuniformEXT( push_constants.dest_image ) ] ).xy);

  const vec3 l0_ambient =
    ( layer_index.x != 0 ) ?
    global_uniforms.ambient *
    light_pool[ global_uniforms.light ].energy.xyz *
    imageLoad( image_pool_2d[ nonuniformEXT( push_constants.occlusion ) ], ivec2( screen_pos * occlusion_scale ) ).r *
    l0_albedo.xyz :
    vec3( 0.0, 0.0, 0.0 );
  const vec3 l1_ambient =
    global_uniforms.ambient *
    light_pool[ global_uniforms.light ].energy.xyz *
    l1_albedo.xyz;
  const vec3 l2_ambient =
    global_uniforms.ambient *
    light_pool[ global_uniforms.light ].energy.xyz *
    l2_albedo.xyz;
  const vec3 l3_ambient =
    global_uniforms.ambient *
    light_pool[ global_uniforms.light ].energy.xyz *
    l2_albedo.xyz;

  const vec3 l0_lighting =
    ( layer_index.x != 0 ) ?
    imageLoad(
      image_pool_2d_array[ nonuniformEXT( push_constants.lighting_image ) ],
      ivec3( screen_pos, max( uint( layer_index.x ) - 1, 0 ) )
    ).xyz :
    vec3( 0.0, 0.0, 0.0 );
  const vec3 l1_lighting =
    ( layer_index.y != 0 ) ?
    imageLoad(
      image_pool_2d_array[ nonuniformEXT( push_constants.lighting_image ) ],
      ivec3( screen_pos, max( uint( layer_index.y ) - 1, 0 ) )
    ).xyz :
    vec3( 0.0, 0.0, 0.0 );
  const vec3 l2_lighting =
    ( layer_index.z != 0 ) ?
    imageLoad(
      image_pool_2d_array[ nonuniformEXT( push_constants.lighting_image ) ],
      ivec3( screen_pos, max( uint( layer_index.z ) - 1, 0 ) )
    ).xyz :
    vec3( 0.0, 0.0, 0.0 );
  const vec3 l3_lighting =
    ( layer_index.w != 0 ) ?
    imageLoad(
      image_pool_2d_array[ nonuniformEXT( push_constants.lighting_image ) ],
      ivec3( screen_pos, max( uint( layer_index.w ) - 1, 0 ) )
    ).xyz :
    vec3( 0.0, 0.0, 0.0 );
  
  const vec4 l0_scat =
    ( layer_index.x != 0 ) ?
    imageLoad(
      image_pool_2d_array[ nonuniformEXT( push_constants.scattering ) ],
      ivec3( screen_pos, max( uint( layer_index.x ) - 1, 0 ) )
    ) :
    vec4( 0.0, 0.0, 0.0, 0.0 );
  const vec4 l1_scat =
    ( layer_index.y != 0 ) ?
    imageLoad(
      image_pool_2d_array[ nonuniformEXT( push_constants.scattering ) ],
      ivec3( screen_pos, max( uint( layer_index.y ) - 1, 0 ) )
    ) :
    vec4( 0.0, 0.0, 0.0, 0.0 );
  const vec4 l2_scat =
    ( layer_index.z != 0 ) ?
    imageLoad(
      image_pool_2d_array[ nonuniformEXT( push_constants.scattering ) ],
      ivec3( screen_pos, max( uint( layer_index.z ) - 1, 0 ) )
    ) :
    vec4( 0.0, 0.0, 0.0, 0.0 );
  const vec4 l3_scat =
    ( layer_index.w != 0 ) ?
    imageLoad(
      image_pool_2d_array[ nonuniformEXT( push_constants.scattering ) ],
      ivec3( screen_pos, max( uint( layer_index.w ) - 1, 0 ) )
    ) :
    vec4( 0.0, 0.0, 0.0, 0.0 );
  const vec4 l0_total = 
    vec4( ( l0_ambient + ( l0_lighting.rgb ) ) * l0_scat.w + l0_scat.rgb, l0_albedo.a );
    //vec4( ( l0_ambient + ( l0_albedo.rgb ) ) * l0_scat.w + l0_scat.rgb, l0_albedo.a );
  const vec4 l1_total = 
    vec4( ( l1_ambient + ( l1_lighting.rgb ) ) * l1_scat.w + l1_scat.rgb, l1_albedo.a );
    //vec4( ( l1_ambient + ( l1_albedo.rgb ) ) * l1_scat.w + l1_scat.rgb, l1_albedo.a );
  const vec4 l2_total = 
    vec4( ( l2_ambient + ( l2_lighting.rgb ) ) * l2_scat.w + l2_scat.rgb, l2_albedo.a );
    //vec4( ( l2_ambient + ( l2_albedo.rgb ) ) * l2_scat.w + l2_scat.rgb, l2_albedo.a );
  const vec4 l3_total = 
    vec4( ( l3_ambient + ( l3_lighting.rgb ) ) * l3_scat.w + l3_scat.rgb, l3_albedo.a );
    //vec4( ( l3_ambient + ( l3_albedo.rgb ) ) * l3_scat.w + l3_scat.rgb, l3_albedo.a );

  float l3_albedo_a = ( l3_albedo.a != 0.0 ) ? 1.0 : 0.0;
  vec4 near_total = vec4( l0_total.xyz, 0.0 );
  near_total =
    vec4( mix( near_total.xyz, l3_total.xyz, l3_albedo_a ), ( l3_depth < far_threshold ) ? 1.0 - ( ( 1.0 - near_total.a ) * ( 1.0 - l3_albedo_a ) ) : near_total.a );
  near_total =
    vec4( mix( near_total.xyz, l2_total.xyz, l2_albedo.a ), ( l2_depth < far_threshold ) ? 1.0 - ( ( 1.0 - near_total.a ) * ( 1.0 - l2_albedo.a ) ) : near_total.a );
  near_total =
    vec4( mix( near_total.xyz, l1_total.xyz, l1_albedo.a ), ( l1_depth < far_threshold ) ? 1.0 - ( ( 1.0 - near_total.a ) * ( 1.0 - l1_albedo.a ) ) : near_total.a );
  near_total =
    vec4( mix( near_total.xyz, l0_total.xyz, l0_albedo.a ), ( l0_depth < far_threshold ) ? 1.0 - ( ( 1.0 - near_total.a ) * ( 1.0 - l0_albedo.a ) ) : near_total.a );
  //near_total = vec4(l0_albedo.xyz, 1.0 );

  float near_depth = af_state.depth;
  near_depth = min( l3_depth, near_depth );
  near_depth = min( l2_depth, near_depth );
  near_depth = min( l1_depth, near_depth );
  near_depth = min( l0_depth, near_depth );
  near_depth = min( af_state.depth, near_depth + af_state.visible_range );

  vec4 far_total = vec4( 0.0, 0.0, 0.0, 0.0 );
  far_total = vec4( mix( far_total.xyz, l3_total.xyz, l3_albedo_a ), 1.0 - ( ( 1.0 - far_total.a ) * ( 1.0 - l3_albedo_a ) ) );
  far_total = vec4( mix( far_total.xyz, l2_total.xyz, l2_albedo.a ), 1.0 - ( ( 1.0 - far_total.a ) * ( 1.0 - l2_albedo.a ) ) );
  far_total = vec4( mix( far_total.xyz, l1_total.xyz, l1_albedo.a ), 1.0 - ( ( 1.0 - far_total.a ) * ( 1.0 - l1_albedo.a ) ) );
  far_total = vec4( mix( far_total.xyz, l0_total.xyz, l0_albedo.a ), 1.0 - ( ( 1.0 - far_total.a ) * ( 1.0 - l0_albedo.a ) ) );
  float far_depth = af_state.zfar;
  far_depth = min( ( l3_depth ), far_depth );
  far_depth = min( ( l2_depth ), far_depth );
  far_depth = min( ( l1_depth ), far_depth );
  far_depth = min( ( l0_depth ), far_depth );
  far_depth = max( af_state.depth, far_depth - af_state.visible_range );

  near_total.rgb = ( near_total.a == 0.0 ) ? far_total.rgb : near_total.rgb;
  
  const float near_coc = min( max( ( af_state.lens_size * abs( near_depth - af_state.depth )/( near_depth )*( af_state.focal_distance/( af_state.depth - af_state.focal_distance ) ) / af_state.sensor_size * image_size.x - 0.0 ), 0.0 ), 32.0 );
  const float far_coc = min( max( ( af_state.lens_size * abs( far_depth - af_state.depth )/( far_depth )*( af_state.focal_distance/( af_state.depth - af_state.focal_distance ) ) / af_state.sensor_size * image_size.x - 0.0 ), 0.0 ), 32.0 );
 
  imageStore( image_pool_2d_array[ nonuniformEXT( push_constants.dest_image ) ], ivec3( screen_pos, 0 ), near_total );
  imageStore( image_pool_2d_array[ nonuniformEXT( push_constants.dest_image ) ], ivec3( screen_pos, 1 ), far_total );
  imageStore( image_pool_2d_array[ nonuniformEXT( push_constants.coc_image ) ], ivec3( screen_pos, 0 ), vec4( near_coc, 0.0, 0.0, 0.0 ) );
  imageStore( image_pool_2d_array[ nonuniformEXT( push_constants.coc_image ) ], ivec3( screen_pos, 1 ), vec4( far_coc, 0.0, 0.0, 0.0 ) );
}

