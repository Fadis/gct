#version 450

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable
#extension GL_EXT_scalar_block_layout : enable

layout(std430, binding = 2) buffer OutputMatrices {
  mat4 camera_projection[6];
  mat4 camera[6];
} matrices;

layout(push_constant) uniform PushConstants {
  ivec4 ioffset;
  vec4 offset;
  float far;
  float near;
} push_constants;

layout(local_size_x = 6, local_size_y = 1, local_size_z = 1 ) in;

mat4 translate(
  vec3 t
) {
  return mat4(
    1, 0, 0, 0,
    0, 1, 0, 0,
    0, 0, 1, 0,
    t.x, t.y, t.z, 1
  );
}

mat4 lookat(
  vec3 eye,
  vec3 center,
  vec3 up
) {
  const vec3 f = normalize( center - eye );
  const vec3 up_ = normalize( up );
  const vec3 s = cross( f, up_ );
  const vec3 u = cross( normalize( s ), f );
  return
    mat4(
      s.x, u.x, -f.x, 0,
      s.y, u.y, -f.y, 0,
      s.z, u.z, -f.z, 0,
        0,   0,    0, 1
    ) *
    translate( -eye );
}

mat4 perspective(
  float fovy,
  float aspect,
  float near,
  float far
) {
  const float f = 1.0 / tan( fovy / 2.0 );
  const float a = ( far + near )/( near -far );
  const float b = ( 2 * far * near )/( near - far );
  return mat4(
    f/aspect,  0,  0,  0,
    0,         f,  0,  0,
    0,         0,  a, -1,
    0,         0,  b,  0
  );
}

mat4 perspective_simple(
  float near,
  float far
) {
  const float a = ( far + near )/( near -far );
  const float b = ( 2 * far * near )/( near - far );
  return mat4(
    1,  0,  0,  0,
    0,  1,  0,  0,
    0,  0,  a, -1,
    0,  0,  b,  0  
  );
}

vec3 up_vector[6] =vec3[](
  vec3(  0, -1,  0 ),
  vec3(  0, -1,  0 ),
  vec3(  0,  0,  1 ),
  vec3(  0,  0, -1 ),
  vec3(  0, -1,  0 ),
  vec3(  0, -1,  0 )
);

vec3 center_offset_vector[6] = vec3[](
  vec3(  1,  0,  0 ),
  vec3( -1,  0,  0 ),
  vec3(  0,  1,  0 ),
  vec3(  0, -1,  0 ),
  vec3(  0,  0,  1 ),
  vec3(  0,  0, -1 )
);

void main() {
  const uint face_index = gl_GlobalInvocationID.x % 6;
  const uint dest_index = face_index;
  const vec3 pos = push_constants.offset.xyz;
  matrices.camera[ dest_index ] =
    lookat(
      pos,
      pos + center_offset_vector[ face_index ],
      up_vector[ face_index ]
    );
  matrices.camera_projection[ dest_index ] =
    perspective_simple(
      push_constants.near,
      push_constants.far
    ) * matrices.camera[ dest_index ];
}



