#version 450

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable

layout (binding = 0, rgba32f) readonly uniform image2DArray gbuffer;
layout (binding = 1) uniform sampler2D src_image;
layout (binding = 2, rgba32f) writeonly uniform image2D dest_image;

layout(local_size_x = 16, local_size_y = 16 ) in;

void main()  {
  const ivec2 screen_pos = ivec2( gl_GlobalInvocationID.xy );
  const ivec2 image_size = imageSize( gbuffer ).xy;
  const vec2 optflow = imageLoad( gbuffer, ivec3( screen_pos, 5 ) ).xy;
  // optical flowを使ってピクセルの速度を求める
  vec2 velocity = ( optflow.xy * image_size.xy );
  vec2 uv = vec2( screen_pos );
  vec4 color = texture( src_image, uv );
  // 速度方向の複数の点でサンプリングを行い平均を取る
  // 速度が大きい程サンプリング間隔を広くする
  uv -= velocity;
  for( uint i = 0; i != 64; i++ ) {
    uv += velocity / 32;
    color += texture( src_image, uv );
  }
  color = color / 64;
  imageStore( dest_image, screen_pos, color );
}

