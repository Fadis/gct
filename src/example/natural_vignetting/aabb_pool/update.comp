#version 460

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable
#extension GL_KHR_shader_subgroup_arithmetic : enable

layout(local_size_x = 1024, local_size_y = 1 ) in;


struct aabb_type {
  vec4 min;
  vec4 max;
};

layout(push_constant) uniform PushConstants {
  uint offset;
  uint count;
} push_constants;

layout(binding = 1,std430) buffer AABBPool {
  aabb_type aabb[];
};

layout(binding = 2,std430) buffer MatrixPool {
  mat4 matrix[];
};

struct request_type {
  uint matrix;
  uint local;
  uint world;
  uint reserved;
};

layout(binding = 3,std430) buffer Request {
  request_type request[];
};

void main() {
  const uint index = gl_GlobalInvocationID.x;
  if( index < push_constants.count ) {
    aabb_type a = aabb[ request[ index + push_constants.offset ].local ];
    a.min /= a.min.w;
    a.max /= a.max.w;
    vec4 vertex[ 8 ];
    vertex[ 0 ] = vec4( a.min.x, a.min.y, a.min.z, 1.0 );
    vertex[ 1 ] = vec4( a.min.x, a.min.y, a.max.z, 1.0 );
    vertex[ 2 ] = vec4( a.min.x, a.max.y, a.min.z, 1.0 );
    vertex[ 3 ] = vec4( a.min.x, a.max.y, a.max.z, 1.0 );
    vertex[ 4 ] = vec4( a.max.x, a.min.y, a.min.z, 1.0 );
    vertex[ 5 ] = vec4( a.max.x, a.min.y, a.max.z, 1.0 );
    vertex[ 6 ] = vec4( a.max.x, a.max.y, a.min.z, 1.0 );
    vertex[ 7 ] = vec4( a.max.x, a.max.y, a.max.z, 1.0 );
    const mat4 m = matrix[ request[ index + push_constants.offset ].matrix ];
    vec4 v = m * vertex[ 0 ];
    v /= v.w;
    aabb_type world_aabb;
    world_aabb.min = v;
    world_aabb.max = v;
    for( uint i = 1; i != 8; i++ ) {
      v = m * vertex[ i ];
      v /= v.w;
      world_aabb.min = min( world_aabb.min, v );
      world_aabb.max = max( world_aabb.max, v );
    }
    aabb[ request[ index + push_constants.offset ].world ] = world_aabb;
  }
}

