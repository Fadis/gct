#version 450

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable

layout (binding = 0, rgba32f) readonly uniform image2DArray gbuffer;
layout (binding = 1, rgba32f) writeonly uniform image2DArray dest_image;

layout(local_size_x = 16, local_size_y = 16 ) in;

#include "constants.h"
#include "push_constants.h"
#include "lighting.h"

void main()  {
  const ivec2 screen_pos = ivec2( gl_GlobalInvocationID.xy );
  const int layer_offset = int( gl_GlobalInvocationID.z );
  const int gbuffer_stride = 6;
  vec3 normal = imageLoad( gbuffer, ivec3( screen_pos, 2 * gbuffer_stride + layer_offset ) ).xyz;
  const vec3 pos = imageLoad( gbuffer, ivec3( screen_pos, 0 * gbuffer_stride + layer_offset ) ).xyz;
  const vec2 mr = imageLoad( gbuffer, ivec3( screen_pos, 4 * gbuffer_stride + layer_offset ) ).xy;
  const float roughness = mr.g;
  const float metallicness = mr.r;
  const vec4 albedo = imageLoad( gbuffer, ivec3( screen_pos, 1 * gbuffer_stride + layer_offset ) ).rgba;
  const vec3 emissive = imageLoad( gbuffer, ivec3( screen_pos, 3 * gbuffer_stride + layer_offset ) ).rgb;
  const float shadow_level = imageLoad( gbuffer, ivec3( screen_pos, 6 * gbuffer_stride + layer_offset ) ).r; 
 
  const vec3 N = normal;
  const vec3 V = normalize(dynamic_uniforms.eye_pos.xyz-pos);
  const vec3 L = normalize(dynamic_uniforms.light_pos.xyz-pos);

  const vec3 diffuse = diffuse_with_mask(
    L, V, N, albedo.rgb, roughness, metallicness, emissive,
    dynamic_uniforms.light_energy,
    shadow_level
  );
  const vec3 specular = specular_with_mask(
    L, V, N, albedo.rgb, roughness, metallicness,
    dynamic_uniforms.light_energy,
    shadow_level
  );
  const vec3 ambient = dynamic_uniforms.ambient * dynamic_uniforms.light_energy * albedo.rgb;
  imageStore( dest_image, ivec3( screen_pos, layer_offset ), vec4( diffuse + specular + ambient, 1.0 ) );
}

