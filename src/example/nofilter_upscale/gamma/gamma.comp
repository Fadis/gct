#version 450

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable

layout (binding = 0, rgba16f) readonly uniform image2D src_image;
layout (binding = 1, rgba8) writeonly uniform image2D dest_image;
layout (binding = 2, rgba16f) readonly uniform image2D bloom_image;

layout(local_size_x = 16, local_size_y = 16 ) in;

#include <gct/gamma.h>

void main() {
  const ivec2 screen_pos = ivec2( gl_GlobalInvocationID.xy );
  const ivec2 src_image_size = imageSize( src_image );
  const ivec2 dest_image_size = imageSize( dest_image );
  const vec2 scale = vec2( src_image_size )/vec2( dest_image_size );
  const vec2 texcoord = vec2( screen_pos ) * scale;
  const ivec2 src_pos = ivec2( texcoord );
  const vec2 src_offset = texcoord - src_pos;
  vec3 bloom;
  const vec4 p0 = imageLoad( src_image, src_pos );
  vec4 linear;
  if( src_offset.x != 0 || src_offset.y != 0 ) {
    linear = vec4( 0, 0, 0, 1 );
    bloom = vec3( 0, 0, 0 );
  }
  else {
    linear = p0;
    bloom = imageLoad( bloom_image, src_pos ).xyz;
  }
  imageStore( dest_image, screen_pos, vec4( gamma( min( max( xyz_to_bt709 * ( linear.rgb + bloom ), vec3( 0.0, 0.0, 0.0 ) ), vec3( 1.0, 1.0, 1.0 ) ) ), linear.a ) );
}

