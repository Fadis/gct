#version 450

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable

layout (binding = 1) uniform sampler2D transmittance;
layout (binding = 2) uniform sampler2D multiscattering;
layout (binding = 3, rgba32f) uniform image3D scattering;

layout(binding = 4) uniform FroxelState {
  mat4 world_to_screen;
  mat4 screen_to_world;
  vec4 sigma_ma;
  vec4 sigma_oa;
  vec4 sigma_rs;
  vec4 sigma_ms;
  vec4 eye_pos;
  vec4 light_pos;
  float g;
  float ground_radius;
  float top_radius;
  float altitude;
  float light_energy;
} froxel_state;

layout(local_size_x = 16, local_size_y = 16, local_size_z = 4 ) in;

#include "constants.h"
#include "volumetric.h"
#include "sky.h"

void main()  {
  const ivec3 screen_pos = ivec3( gl_GlobalInvocationID.xyz );
  const vec3 screen_pos_f = vec3( screen_pos ) / vec3( imageSize( scattering ).xyz ) * 2.0 - 1.0;
  // froxelの各交点において
  vec4 pos = froxel_state.screen_to_world * vec4( screen_pos_f, 1.0 );
  pos /= pos.w;

  const vec3 V = normalize( froxel_state.eye_pos.xyz - pos.xyz );
  const vec3 L = normalize( froxel_state.light_pos.xyz - pos.xyz );

  vec3 atmosphere_distance = get_atmosphere_distance( froxel_state.altitude, -V, froxel_state.ground_radius, froxel_state.top_radius );
  atmosphere_distance.x = min( atmosphere_distance.x, pos.z );
  atmosphere_distance.y = min( atmosphere_distance.y, pos.z );
  const float distance = ( atmosphere_distance.y - atmosphere_distance.y );

  vec3 view_transmittance = vec3( 1.0, 1.0, 1.0 );
  view_transmittance *= beer_lambert( froxel_state.sigma_rs.rgb, relative_rayleigh_density( froxel_state.altitude - froxel_state.ground_radius ), distance );
  view_transmittance *= beer_lambert( froxel_state.sigma_ma.rgb, relative_mie_density( froxel_state.altitude - froxel_state.ground_radius ), distance );
  view_transmittance *= beer_lambert( froxel_state.sigma_ms.rgb, relative_mie_density( froxel_state.altitude - froxel_state.ground_radius ), distance );
  view_transmittance *= beer_lambert( froxel_state.sigma_oa.rgb, relative_ozone_density( froxel_state.altitude - froxel_state.ground_radius ), distance );

  const float zenith_sun_angle = acos( dot( vec3( 0.0, 1.0, 0.0 ), L ) );
  const float max_angle = pi / 2.0;
  const float min_angle = get_min_rad( froxel_state.altitude, froxel_state.ground_radius );
  vec3 light_transmittance = vec3( 0.0, 0.0, 0.0 );
  if( zenith_sun_angle < ( max_angle - min_angle ) ) {
    vec2 transmittance_texcoord = vec2(
      zenith_sun_angle/( max_angle - min_angle ),
      ( froxel_state.top_radius - froxel_state.altitude )/( froxel_state.top_radius - froxel_state.ground_radius )
    );
    transmittance_texcoord.x = ( -2.0 + sqrt( 4.0 - 4.0 * transmittance_texcoord.x ) )/( -2.0 );
    transmittance_texcoord.y = 1.0 - ( -2.0 + sqrt( 4.0 - 4.0 * transmittance_texcoord.y ) )/( -2.0 );
    light_transmittance = texture( transmittance, transmittance_texcoord ).rgb;
  }
  
  const vec3 rayleigh_scattering = froxel_state.sigma_rs.rgb * rayleigh( acos( dot( -L, V ) ) );
  const vec3 mie_scattering = froxel_state.sigma_ms.rgb * henyey_greenstein_schlick2( froxel_state.g, acos( dot( -L, V ) ) );

  vec3 light_energy = vec3( froxel_state.light_energy, froxel_state.light_energy, froxel_state.light_energy ) * max( 0.0, cos( zenith_sun_angle ) );
  light_energy *= view_transmittance * ( rayleigh_scattering + mie_scattering ) * light_transmittance;

  const float view_transmittance_lm = 0.21 * view_transmittance.r + 0.72 * view_transmittance.g + 0.07 * view_transmittance.b;

  imageStore( scattering, screen_pos, vec4( light_energy, view_transmittance_lm ) );
}

