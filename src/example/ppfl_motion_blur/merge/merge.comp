#version 450

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable

layout (binding = 0, rgba32f) readonly uniform image2DArray gbuffer;
layout (binding = 1, rgba32f) readonly uniform image2DArray src_image;
layout (binding = 2, rgba32f) writeonly uniform image2D dest_image;
layout (binding = 3, rgba32f) writeonly uniform image2D bloom_image;
layout (binding = 9) uniform sampler2D skyview;

layout(binding = 4,std430) buffer FragmentList {
  uint fragment_list[];
};

#include "push_constants.h"
#include "constants.h"
#include "sky.h"

struct fragment_info {
  ivec2 offset;
  uint layer;
  float depth;
  bool valid;
};

const uint null_fragment_info = 0xfff;
const uint time_steps = 32;

fragment_info decode_fragment_info( uint encoded ) {
  fragment_info temp;
  temp.offset = ivec2(
    int( ( encoded >> 22 ) & 0x3FF ) - 511,
    int( ( encoded >> 12 ) & 0x3FF ) - 511
  );
  temp.depth = float( ( encoded >> 2 ) & 0x3FF )/1023.0;
  temp.layer = ( encoded ) & 0x3;
  temp.valid = encoded != null_fragment_info;
  return temp;
}

uint get_fragment_list_index( ivec2 pos, uint t ) {
  const ivec2 image_size = imageSize( gbuffer ).xy;
  const bool valid =
    pos.x >= 0 && pos.x < image_size.x &&
    pos.y >= 0 && pos.y < image_size.y &&
    t >= 0 && t < time_steps;
  return valid ? pos.y * image_size.x * time_steps + pos.x * time_steps + t : 0xFFFFFFFF;
}

uint load_fragment_info( uint index ) {
  return ( index != 0xFFFFFFFF ) ? fragment_list[ index ] : null_fragment_info;
}

layout (std430, binding = 6) buffer Output {
  uint value;
  float scale;
} tone;

layout(binding = 11,std430) buffer MatrixPool {
  mat4 matrix_pool[];
};

layout(local_size_x = 16, local_size_y = 16 ) in;

void main()  {
  const mat3 bt709_to_xyz = mat3(
    0.4124079, 0.2126478, 0.0193316,
    0.3575896, 0.7151791, 0.1191965,
    0.1804326, 0.0721730, 0.9502783
  );
  const ivec2 screen_pos = ivec2( gl_GlobalInvocationID.xy );

  const ivec4 layer_order = ivec4( imageLoad( gbuffer, ivec3( screen_pos, 32 ) ) );

  vec4 pos = matrix_pool[ global_uniforms.screen_to_world_matrix ] * vec4( vec2( screen_pos )/vec2( gl_NumWorkGroups * gl_WorkGroupSize ) * 2.0 - 1.0, 0.0, 1.0 );
  pos /= pos.w;
  vec4 pos_in_screen = matrix_pool[ global_uniforms.projection_matrix ] * matrix_pool[ global_uniforms.camera_matrix ] * pos;
  pos_in_screen /= pos_in_screen.w;
  const vec3 pos_in_froxel = pos_in_screen.xyz * 0.5 + 0.5;
  
  const vec3 eye_dir = normalize( pos.xyz - global_uniforms.eye_pos.xyz );
  const vec2 latitude_longitude = world_to_llar( eye_dir );
  const vec2 skyview_texcoord = vec2(
    ( latitude_longitude.y + pi ) / ( 2.0 * pi ),
    1.0 - skyview_latitude_to_texcoord( latitude_longitude.x )
  );
  vec3 sky = bt709_to_xyz * texture( skyview, skyview_texcoord ).rgb;
  vec3 total = vec3( 0.0, 0.0, 0.0 );
  float scale = 0.0;
  // fragment listの各時刻にscreen_posの位置に映っていたフラグメントを読んで、平均を取る
  // 何も映っていなかったら背景の空が映っていた事にする
  for( uint t = 0; t != time_steps; t++ ) {
    const fragment_info f = decode_fragment_info( load_fragment_info( get_fragment_list_index( screen_pos, t ) ) );
    vec4 color = f.valid ? imageLoad( src_image, ivec3( screen_pos + f.offset, f.layer ) ) : vec4( sky, 1.0 );
    total += color.rgb * color.a;
    scale += color.a;
  }
  total /= max( scale, 1.0 );
  
  total /= tone.scale;
  const vec3 bloom = max( total - vec3( 1.0, 1.0, 1.0 ), vec3( 0.0, 0.0, 0.0 ) );

  imageStore( dest_image, screen_pos, vec4( total, 1.0 ) );
  imageStore( bloom_image, screen_pos, vec4( bloom, 1.0 ) );
}

