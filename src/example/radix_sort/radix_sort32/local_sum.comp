#version 460

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable
#extension GL_KHR_shader_subgroup_arithmetic : enable

layout(local_size_x = 1024, local_size_y = 1 ) in;

layout(push_constant) uniform PushConstants {
  uint n;
  uint digit;
} push_constants;

struct key_value {
  uint key;
  uint value;
};

layout(std430, binding = 0) buffer Input {
  key_value input_data[];
};

layout(std430, binding = 1) buffer LocalOffset {
  uint local_offset[];
};

layout(std430, binding = 2) buffer WorkGroupOffset {
  uint workgroup_offset[];
};


layout(std430, binding = 3) buffer Output {
  key_value output_data[];
};

shared uint[32] subgroup_offset;

void main() {
  const uint index = gl_GlobalInvocationID.x;
  uint value = 0;
  uint digit = push_constants.digit;
  if( index < push_constants.n ) {
    value = 1 - ( ( input_data[ index ].key >> digit ) & 0x1 );
  }
  uint subgroup_pos = subgroupInclusiveAdd( value );
  if( gl_SubgroupInvocationID == gl_SubgroupSize - 1 ) {
    subgroup_offset[ gl_SubgroupID ] = subgroup_pos;
  }
  barrier();
  if( gl_SubgroupID == 0 ) {
    subgroup_offset[ gl_SubgroupInvocationID ] = subgroupInclusiveAdd( subgroup_offset[ gl_SubgroupInvocationID ] );
  }
  barrier();
  uint subgroup_offset_ = 0;
  if( gl_SubgroupID != 0 ) {
    subgroup_offset_ = subgroup_offset[ gl_SubgroupID - 1 ];
  }

  if( gl_LocalInvocationID.x == gl_WorkGroupSize.x - 1 ) {
    local_offset[ gl_WorkGroupID.x * gl_WorkGroupSize.x ] = 0;
    workgroup_offset[ gl_WorkGroupID.x ] =
      subgroup_offset_ +
      subgroup_pos;
  }
  else {
    if( index < push_constants.n - 1 ) {
      local_offset[ index + 1 ] =
        subgroup_offset_ +
        subgroup_pos;
    }
  }
}

