#version 460

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable
#extension GL_KHR_shader_subgroup_arithmetic : enable

layout(local_size_x = 1024, local_size_y = 1 ) in;

layout(push_constant) uniform PushConstants {
  uint n;
  uint digit;
} push_constants;

struct key_value {
  uint key;
  uint value;
};

layout(std430, binding = 0) buffer Input {
  key_value input_data[];
};

layout(std430, binding = 1) buffer PrefixSum {
  uint workgroup_offset[];
};


layout(std430, binding = 2) buffer Output {
  uint output_data[];
};


shared uint[32] subgroup_offset;

void main() {
  const uint index = gl_GlobalInvocationID.x;
  uint value = 1;
  if( index < push_constants.n ) {
    value = ( ~input_data[ index ].key >> push_constants.digit ) & 1;
  }
  uint subgroup_pos = subgroupInclusiveAdd( value );
  if( gl_SubgroupInvocationID == gl_SubgroupSize - 1 ) {
    subgroup_offset[ gl_SubgroupID ] = subgroup_pos;
  }
  barrier();
  if( gl_SubgroupID == 0 ) {
    subgroup_offset[ index ] = subgroupInclusiveAdd( subgroup_offset[ index ] );
  }
  barrier();
  //if( index + 1 >=  push_constants.n ) {
  //  return;
  //}
  uint subgroup_offset_ = 0;
  if( gl_SubgroupID != 0 ) {
    subgroup_offset_ = subgroup_offset[ gl_SubgroupID - 1 ];
  }
  uint workgroup_offset_ = 0;
  if( gl_WorkGroupID.x != 0 ) {
    uint orig = atomicAdd( workgroup_offset[ gl_WorkGroupID.x - 1 ], 0 );
    while( orig < 0x80000000 ) {
      orig = atomicAdd( workgroup_offset[ gl_WorkGroupID.x - 1 ], 0 );
    }
    workgroup_offset_ = orig - 0x80000000;
  }

  uint offset =
    workgroup_offset_ +
    subgroup_offset_ +
    subgroup_pos;

  if( gl_LocalInvocationID.x == gl_WorkGroupSize.x - 1 ) {
    workgroup_offset[ gl_WorkGroupID.x ] = offset + 0x80000000;
  }

  output_data[ index ] = offset;

}

