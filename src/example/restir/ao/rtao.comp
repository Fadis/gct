#version 450

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_arithmetic : enable

layout (binding = 0, rgba32f) readonly uniform image2DArray gbuffer;
layout (binding = 2, r32f) readonly uniform image2D previous_ao;
layout (binding = 3, r32f) uniform image2D ao;
layout (binding = 4) uniform sampler3D distance_field;
layout (binding = 6, rg32ui) readonly uniform uimage2D previous_history;
layout (binding = 7, rg32ui) writeonly uniform uimage2D history;

layout(local_size_x = 16, local_size_y = 8 ) in;

#include "constants.h"
#include "poisson_sphere_surface.h"
#include "random.h"
#include "push_constants.h"

layout(binding = 11,std430) buffer MatrixPool {
  mat4 matrix_pool[];
};

mat2 get_rotate_matrix2( float angle ) {
  float s = sin( angle );
  float c = cos( angle );
  return mat2( c, s, -s, c );
}

void main() {
  const ivec2 screen_pos = ivec2( gl_GlobalInvocationID.xy );
  const vec4 center_ = imageLoad( gbuffer, ivec3( screen_pos, 0 ) );
  vec3 normal = imageLoad( gbuffer, ivec3( screen_pos, 2 ) ).xyz;
  const bool valid_normal = normal != vec3( 0, 0, 0 );
  normal = valid_normal ? normal : vec3( 0.0, 0.0, 1.0 );
  const vec2 mr = imageLoad( gbuffer, ivec3( screen_pos, 4 ) ).rg;
  const float metallicness = mr.r;
  const float roughness = mr.g;
  const vec3 center = center_.xyz;
  
  const mat3 rot3 = mat3( get_rotate_matrix2( rand1( vec2( screen_pos.xy ) + vec2( global_uniforms.frame_counter * 48.0, global_uniforms.frame_counter * 37.0 ) ) * 2 * pi ) );
  
  const ivec3 image_size = imageSize( gbuffer );
  
  vec3 ray_dir = ( rot3 * poisson_sphere_surface[ ( int( rand1( vec2( screen_pos.yx ) ) * poisson_sphere_surface_sample_count ) + global_uniforms.frame_counter * 3 ) % poisson_sphere_surface_sample_count ] );
  ray_dir = ( dot( normal, ray_dir ) < 0.0 ) ? -ray_dir : ray_dir;
  vec3 current_pos_in_voxel_space = ( matrix_pool[ global_uniforms.voxel ] * vec4( center, 1.0 ) ).xyz;
  const vec3 direction_in_voxel_space = normalize( ( matrix_pool[ global_uniforms.voxel ] * vec4( center + ray_dir, 1.0 ) ).xyz - current_pos_in_voxel_space );
  current_pos_in_voxel_space += direction_in_voxel_space * 4.0/512.0;
  for( int j = 0; j < 16; j++ ) {
    float r = texture( distance_field, current_pos_in_voxel_space ).r;
    current_pos_in_voxel_space += direction_in_voxel_space * r;
  }
  const vec3 world_pos = ( matrix_pool[ global_uniforms.inversed_voxel ] * vec4( current_pos_in_voxel_space, 1.0 ) ).xyz;
  const float travel_distance = distance( world_pos.xyz, center );
  const float visibility = valid_normal ? ( travel_distance > 3.0 ? 1.0 : 0.0 ) * dot( normal, ray_dir ) : 1.0;

  const vec3 optical_flow = imageLoad( gbuffer, ivec3( screen_pos, 5 ) ).xyz;
  const uint instance = uint( imageLoad( gbuffer, ivec3( screen_pos, 4 ) ).z );
  const ivec2 previous_screen_pos = screen_pos - ivec2( ( optical_flow.xy * vec2( 0.5, 0.5 ) ) * ( vec2( image_size.xy ) ) );
  float existing = 1.0;
  uvec2 hist = uvec2( 0, instance );
  const bool valid_pos = (
    previous_screen_pos.x >= 0 &&
    previous_screen_pos.x < image_size.x &&
    previous_screen_pos.y >= 0 &&
    previous_screen_pos.y < image_size.y
  );
  const uvec2 history_value = imageLoad( previous_history, previous_screen_pos ).xy;
  const float ao_value = imageLoad( previous_ao, previous_screen_pos ).r;
  existing = ( valid_pos && history_value.y == instance ) ? ao_value : existing;
  hist = ( valid_pos && history_value.y == instance ) ? history_value : hist;

  const float speed = length( optical_flow.xy );
  hist.x = min( hist.x, uint( mix( 300.0, 1.0, speed ) ) );
  imageStore( ao, screen_pos, vec4( ( visibility + existing * hist.x )/( hist.x + 1 ), 0.0, 0.0, 1.0 ) );
  imageStore( history, screen_pos, uvec4( hist.x + 1, hist.y, 0, 0 ) );
}

