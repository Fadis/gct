#version 450

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable

layout (binding = 1, r32ui) readonly uniform uimage3D voxel;
layout (binding = 2, r32f) writeonly uniform image3D distance_field;

layout(local_size_x = 8, local_size_y = 4, local_size_z = 4 ) in;

ivec3 decode_pos( uint v ) {
  return ivec3(
    ( v >> 20 ) & 0x3FF,
    ( v >> 10 ) & 0x3FF,
    ( v ) & 0x3FF
  );
}

uint encode_pos( ivec3 v ) {
  return
    ( v.x << 20 ) |
    ( v.y << 10 ) |
    v.z;
}

bool empty( uint v ) {
  return ( v >> 30 ) != 0;
}

uint pos_to_index( ivec3 pos, ivec3 image_size ) {
  return pos.x + pos.y * image_size.x + pos.z * image_size.x * image_size.y;
}

ivec3 index_to_pos( uint index, ivec3 image_size ) {
  return ivec3(
    index % image_size.x,
    ( index / image_size.x ) % image_size.y,
    ( index / image_size.x / image_size.y )
  );
}

void main()  {
  const ivec3 image_size = imageSize( distance_field );
  const ivec3 pos = ivec3( gl_GlobalInvocationID.xyz );
  const uint center_encoded = imageLoad( voxel, pos ).r;
  vec3 centerf = vec3( decode_pos( center_encoded ) ) / vec3( image_size - ivec3( 1, 1, 1 ) );
  vec3 posf = vec3( pos ) / vec3( image_size - ivec3( 1, 1, 1 ) );
  const float eps = 0.001;
  float dist = distance( posf, centerf ) - eps;
  imageStore( distance_field, pos, vec4( dist, 0.0, 0.0, 0.0 ) );
}

