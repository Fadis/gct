#version 450

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable

layout (binding = 0, rgba32f) readonly uniform image2DArray gbuffer;
layout (binding = 1, rgba32f) writeonly uniform image2D diffuse_image;
layout (binding = 2, rgba32f) writeonly uniform image2D specular_image;
layout (binding = 9, rgba32f) readonly uniform image2DArray reservoir;
layout (binding = 10, rgba32f) readonly uniform image2D previous_diffuse_image;
layout (binding = 11, rgba32f) readonly uniform image2D previous_specular_image;
layout (binding = 12, rg32ui) writeonly uniform uimage2D history;
layout (binding = 13, rg32ui) readonly uniform uimage2D previous_history;

layout(local_size_x = 16, local_size_y = 8 ) in;

#include "constants.h"
#include "push_constants.h"
#include "lighting.h"
#include "punctual_light_parameter.h"

layout (binding = 5) uniform sampler3D distance_field;

layout(binding = 6,std430) buffer LightPool {
  punctual_light_parameter light[];
};

layout(binding = 7,std430) buffer ActiveLight {
  uint active_light[];
};

layout(binding = 8,std430) buffer MatrixPool {
  mat4 matrix_pool[];
};

mat2 get_rotate_matrix2( float angle ) {
  float s = sin( angle );
  float c = cos( angle );
  return mat2( c, s, -s, c );
}

void main()  {
  const ivec2 screen_pos = ivec2( gl_GlobalInvocationID.xy );
  vec3 normal = imageLoad( gbuffer, ivec3( screen_pos, 2 ) ).xyz;
  const vec3 pos = imageLoad( gbuffer, ivec3( screen_pos, 0 ) ).xyz;
  const vec2 mr = imageLoad( gbuffer, ivec3( screen_pos, 4 ) ).xy;
  const float roughness = mr.g;
  const float metallicness = mr.r;
  const vec4 albedo = imageLoad( gbuffer, ivec3( screen_pos, 1 ) ).rgba;
  const vec3 emissive = imageLoad( gbuffer, ivec3( screen_pos, 3 ) ).rgb;

  uint light_index = uint( imageLoad( reservoir, ivec3( screen_pos, 0 ) ).x );
  vec3 diffuse = vec3( 0.0, 0.0, 0.0 );
  vec3 specular = vec3( 0.0, 0.0, 0.0 );
  const bool light_valid = ( light_index != 32767 );
  light_index = light_valid ? light_index : 0;

  const float shadow_level = 1.0;
  
  const vec3 N = normal;
  const vec3 V = normalize(global_uniforms.eye_pos.xyz-pos);
  const vec3 L = normalize( light[ light_index ].world_position.xyz-pos);
  const float d = distance( pos.xyz, light[ light_index ].world_position.xyz );
  
  const vec3 energy = light[ light_index ].energy.rgb / ( d * d );
  
  diffuse = light_valid ? diffuse_with_mask(
    L, V, N, albedo.rgb, roughness, metallicness, emissive,
    energy,
    shadow_level
  ) : diffuse;
  specular = light_valid ? specular_with_mask(
    L, V, N, albedo.rgb, roughness, metallicness,
    energy,
    shadow_level
  ) : specular;
  const ivec3 image_size = imageSize( gbuffer );
  const vec3 optical_flow = imageLoad( gbuffer, ivec3( screen_pos, 5 ) ).xyz;
  const uint instance = uint( imageLoad( gbuffer, ivec3( screen_pos, 4 ) ).z );
  const ivec2 previous_screen_pos = screen_pos - ivec2( ( optical_flow.xy * vec2( 0.5, 0.5 ) ) * ( vec2( image_size.xy ) ) );
  vec4 existing_diffuse = vec4( 0.0, 0.0, 0.0, 1.0 );
  vec4 existing_specular = vec4( 0.0, 0.0, 0.0, 1.0 );
  uvec2 hist = uvec2( 0, instance );
  const bool history_in_range = (
    previous_screen_pos.x >= 0 &&
    previous_screen_pos.x < image_size.x &&
    previous_screen_pos.y >= 0 &&
    previous_screen_pos.y < image_size.y
  );
  const uvec2 history_value = imageLoad( previous_history, previous_screen_pos ).xy;
  const vec4 diffuse_value = imageLoad( previous_diffuse_image, previous_screen_pos );
  const vec4 specular_value = imageLoad( previous_specular_image, previous_screen_pos );
  const bool history_valid = history_in_range && ( history_value.y == instance );
  existing_diffuse = history_valid ? diffuse_value : existing_diffuse;
  existing_specular = history_valid ? specular_value : existing_specular;
  hist = history_valid ? history_value : hist;
  const float speed = length( optical_flow.xy );
  hist.x = min( hist.x, uint( mix( 300.0, 1.0, speed ) ) );
  imageStore( diffuse_image, screen_pos, ( vec4( diffuse, 1.0 ) + existing_diffuse * hist.x )/( hist.x + 1 ) );
  imageStore( specular_image, screen_pos, ( vec4( specular, 1.0 ) + existing_specular * hist.x )/( hist.x + 1 ) );
  //imageStore( diffuse_image, screen_pos, vec4( diffuse, 1.0 ) );
  //imageStore( specular_image, screen_pos, vec4( specular, 1.0 ) );
  imageStore( history, screen_pos, uvec4( hist.x + 1, hist.y, 0, 0 ) );
}

