#version 450

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_arithmetic : enable

layout (binding = 0, rgba32f) readonly uniform image2DArray gbuffer;
layout (binding = 2, r32f) readonly uniform image2D reproject;
layout (binding = 3, r32f) uniform image2D dest_image;
layout (binding = 4) uniform sampler3D distance_field;
layout (binding = 5) uniform sampler2D environment_map;
layout (binding = 6, r32ui) readonly uniform uimage2D src_history;
layout (binding = 7, r32ui) writeonly uniform uimage2D dest_history;

layout(local_size_x = 16, local_size_y = 16 ) in;

#include "constants.h"
#include "poisson_sphere_surface.h"
#include "random.h"
#include "push_constants.h"

mat2 get_rotate_matrix2( float angle ) {
  float s = sin( angle );
  float c = cos( angle );
  return mat2( c, s, -s, c );
}

vec3 diffuse_ambient_light(
  vec3 dir,
  vec3 albedo,
  float roughness,
  float metallicness
) {
  vec3 environment_diffuse = textureLod( environment_map, vec2( dir.x, dir.y ) * 0.5 + 0.5, 0.0 ).rgb * mix( albedo,    vec3( 0, 0, 0 ), metallicness );
  return environment_diffuse;
}

void main() {
  const ivec2 screen_pos = ivec2( gl_GlobalInvocationID.xy );
  const vec4 center_ = imageLoad( gbuffer, ivec3( screen_pos, 0 ) );
  vec3 normal = imageLoad( gbuffer, ivec3( screen_pos, 2 ) ).xyz;
  if( normal == vec3( 0, 0, 0 ) ) {
    imageStore( dest_image, screen_pos, vec4( 0, 0, 0, 0 ) );
    return;
  }
  const vec4 view_normal = ( dynamic_uniforms.projection_matrix * dynamic_uniforms.camera_matrix * vec4( normal, 1.0 ) );
  const vec2 mr = imageLoad( gbuffer, ivec3( screen_pos, 4 ) ).rg;
  const float metallicness = mr.r;
  const float roughness = mr.g;
  const vec3 center = center_.xyz;
  
  const mat3 rot3 = mat3( get_rotate_matrix2( rand1( vec2( screen_pos.xy ) + dynamic_uniforms.frame_counter / 48 ) * 2 * pi ) );
  
  const ivec3 image_size = imageSize( gbuffer );
  const ivec2 image_right_bottom = image_size.xy - ivec2( 1, 1 );
  
  vec3 env_color = vec3( 0.0, 0.0, 0.0 );
  float visibility = 0.0;
  vec3 center_in_voxel_space = ( dynamic_uniforms.voxel * vec4( center, 1.0 ) ).xyz;
  
  {
    vec3 ray_dir = ( rot3 * poisson_sphere_surface[ ( int( rand1( vec2( screen_pos.yx ) ) * poisson_sphere_surface_sample_count ) + dynamic_uniforms.frame_counter / 3 ) % poisson_sphere_surface_sample_count ] );
    if( dot( normal, ray_dir ) < 0.0 ) {
      ray_dir = -ray_dir;
    }
    vec3 current_pos_in_voxel_space = center_in_voxel_space;
    const vec3 direction_in_voxel_space = normalize( ( dynamic_uniforms.voxel * vec4( center + ray_dir, 1.0 ) ).xyz - current_pos_in_voxel_space );
    current_pos_in_voxel_space += direction_in_voxel_space * 4.0/512.0;
    for( int j = 0; j < 64; j++ ) {
      float r = texture( distance_field, current_pos_in_voxel_space ).r;
      current_pos_in_voxel_space += direction_in_voxel_space * r;
    }
    vec3 world_pos = ( dynamic_uniforms.inversed_voxel * vec4( current_pos_in_voxel_space, 1.0 ) ).xyz;
    const float travel_distance = distance( world_pos.xyz, center );
    visibility = ( travel_distance > 3.0 ? 1.0 : 0.0 ) * dot( normal, ray_dir );
  }

  vec4 existing = imageLoad( reproject, screen_pos ).rgba;
  const uint history = min( imageLoad( src_history, screen_pos ).r, 60 );
  imageStore( dest_image, screen_pos, vec4( ( visibility + existing.r * history )/( history + 1 ), 0.0, 0.0, 1.0 ) );
  imageStore( dest_history, screen_pos, uvec4( history + 1, 0, 0, 0 ) );
}

