#version 460

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_shader_image_load_formatted : enable

// 8bit、16bitの値のバッファを読めるようにする拡張を使う
// 頂点バッファをシェーダーから読むのに使う
#extension GL_EXT_shader_16bit_storage : enable
#extension GL_EXT_shader_8bit_storage : enable

// Subgroup演算拡張を使う
#extension GL_KHR_shader_subgroup_arithmetic : enable

#define GCT_ENABLE_8BIT_16BIT_STORAGE
#define GCT_USE_IMAGE_POOL_WITHOUT_FORMAT
#include <gct/constants.h>
#include <gct/scene_graph.h>
#include <gct/scene_graph/accessor.h>
#include <gct/distance_constraint.h>
layout(local_size_x = 128, local_size_y = 1 ) in;

void main() {
  const resource_pair_type id = resource_pair[ push_constants.instance ];
  const instance_resource_index_type inst = instance_resource_index[ id.inst ];
  const primitive_resource_index_type prim = primitive_resource_index[ id.prim ];
  const mesh_type mesh = mesh_pool[ prim.mesh ];

  const uint particle_id = gl_GlobalInvocationID.x;
  const bool in_range = mesh.unique_vertex_count > particle_id;

  if( !in_range ) return;

  if( particle_id != 0 && particle_id != 2 ) return;

  particle_pool[ mesh.particle_offset + particle_id ].attached = 1u; 
}

