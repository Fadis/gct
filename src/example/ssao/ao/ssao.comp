#version 450

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_arithmetic : enable

layout (binding = 0, rgba32f) readonly uniform image2DArray gbuffer;
layout (binding = 1, r32f) uniform image2D dest_image;

layout(local_size_x = 16, local_size_y = 16 ) in;

#include "constants.h"
#include "poisson_sphere.h"
#include "random.h"
#include "push_constants.h"

mat2 get_rotate_matrix2( float angle ) {
  float s = sin( angle );
  float c = cos( angle );
  return mat2( c, s, -s, c );
}

void main() {
  const float kernel_size = 0.5;
  const ivec2 screen_pos = ivec2( gl_GlobalInvocationID.xy );
  const vec4 center_ = imageLoad( gbuffer, ivec3( screen_pos, 0 ) );
  vec3 normal = imageLoad( gbuffer, ivec3( screen_pos, 2 ) ).xyz;
  if( normal == vec3( 0, 0, 0 ) ) {
    imageStore( dest_image, screen_pos, vec4( 0, 0, 0, 0 ) );
    return;
  }
  const vec3 center = center_.xyz;
  const mat3 rot3 = mat3( get_rotate_matrix2( rand1( vec2( screen_pos.xy ) ) * 2 * pi ) );
  const ivec3 image_size = imageSize( gbuffer );
  float visibility = 0.0;
  float scale = 0.0;
  for( int i = 0; i < poisson_sphere_sample_count; i++ ) {
    vec3 offset = ( rot3 * poisson_sphere[ i ] ) * kernel_size;
    if( dot( normal, offset ) < 0.0 ) {
      offset = -offset;
    }
    vec3 world_pos = center + offset;
    vec4 screen_pos = dynamic_uniforms.projection_matrix * dynamic_uniforms.camera_matrix * vec4( world_pos, 1.0 );
    screen_pos /= screen_pos.w;
    ivec2 sample_pos = ivec2(
      ( screen_pos.x * 0.5 + 0.5 ) * ( image_size.x - 1 ), 
      ( screen_pos.y * 0.5 + 0.5 ) * ( image_size.y - 1 )
    );
    sample_pos.x = max( min( sample_pos.x, image_size.x - 1 ), 0 );
    sample_pos.y = max( min( sample_pos.y, image_size.y - 1 ), 0 );
    const float r = max( dot( normal, normalize( offset ) ), 0.0 );
    const float sample_depth = imageLoad( gbuffer, ivec3( sample_pos, 0 ) ).w;
    visibility +=  ( 1.0 - step( sample_depth, screen_pos.z ) ) * r;
    scale += r;

    //visibility += 1.0 - step( sample_depth, screen_pos.z );
  }
  imageStore( dest_image, screen_pos, vec4( visibility / scale, 0, 0, 0 ) );
}

