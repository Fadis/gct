#version 450

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable

layout (binding = 0, rgba32f) readonly uniform image2D src_image;
layout (binding = 1, rgba32f) writeonly uniform image2D dest_image;

layout(local_size_x = 128, local_size_y = 1 ) in;

#include "gauss.h"

const int kernel_size = 16;
shared vec3[gl_WorkGroupSize.x+kernel_size*2+1] cache;

void main() {
  const ivec2 screen_pos = ivec2( gl_GlobalInvocationID.xy );
  const uint lcpos = gl_LocalInvocationID.x;
  const uint hcpos = lcpos + gl_WorkGroupSize.x;
  const ivec2 image_size = imageSize( src_image );
  ivec2 lsample_pos = screen_pos;
  lsample_pos.x = lsample_pos.x - kernel_size;
  ivec2 hsample_pos = lsample_pos;
  hsample_pos.x += int( gl_WorkGroupSize.x );
  lsample_pos.x = max( min( lsample_pos.x, image_size.x ), 0 );
  lsample_pos.y = max( min( lsample_pos.y, image_size.y ), 0 );
  hsample_pos.x = max( min( hsample_pos.x, image_size.x ), 0 );
  hsample_pos.y = max( min( hsample_pos.y, image_size.y ), 0 );
  cache[ lcpos ] = imageLoad( src_image, lsample_pos ).rgb;
  if( hcpos < gl_WorkGroupSize.x+kernel_size*2+1 ) {
    cache[ hcpos ] = imageLoad( src_image, hsample_pos ).rgb;
  }
  barrier();
  vec3 sum = vec3( 0.0, 0.0, 0.0 );
  for( uint i = 0; i != gauss5_16_size; i++ ) {
    sum += cache[ lcpos + i ] * gauss5_16[ i ];
  }
  imageStore( dest_image, screen_pos, vec4( sum, 1.0 ) );
}

