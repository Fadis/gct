#version 450

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable

layout (binding = 1, rgba32f) readonly uniform image2D src_image;
layout (binding = 2, rgba32f) writeonly uniform image2D dest_image;
layout (binding = 3, rgba32f) writeonly uniform image2D bloom_image;
layout (binding = 4, rgba32f) readonly uniform image2D flare_image;

#include "push_constants.h"
#include "constants.h"

layout (std430, binding = 6) buffer Output {
  uint value;
  float scale;
} tone;

layout(binding = 11,std430) buffer MatrixPool {
  mat4 matrix_pool[];
};

layout(local_size_x = 16, local_size_y = 16 ) in;

void main()  {
  const ivec2 screen_pos = ivec2( gl_GlobalInvocationID.xy );
  vec4 pos = matrix_pool[ global_uniforms.screen_to_world_matrix ] * vec4( vec2( screen_pos )/vec2( gl_NumWorkGroups * gl_WorkGroupSize ) * 2.0 - 1.0, 0.0, 1.0 );
  pos /= pos.w;
  vec4 pos_in_screen = matrix_pool[ global_uniforms.projection_matrix ] * matrix_pool[ global_uniforms.camera_matrix ] * pos;
  pos_in_screen /= pos_in_screen.w;
  const vec3 pos_in_froxel = pos_in_screen.xyz * 0.5 + 0.5;
  
  vec3 total =
    imageLoad( src_image, screen_pos ).rgb +
    imageLoad( flare_image, screen_pos ).rgb;
  
  total /= tone.scale;
  const vec3 bloom = max( total - vec3( 1.0, 1.0, 1.0 ), vec3( 0.0, 0.0, 0.0 ) );

  imageStore( dest_image, screen_pos, vec4( total, 1.0 ) );
  imageStore( bloom_image, screen_pos, vec4( bloom, 1.0 ) );
}

