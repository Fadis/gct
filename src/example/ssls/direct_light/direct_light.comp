#version 450

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable

layout (binding = 0, rgba32f) readonly uniform image2D src_image;
layout (binding = 1, r32f) writeonly uniform image2D dest_image;

layout(local_size_x = 16, local_size_y = 16 ) in;

#include "constants.h"
#include "push_constants.h"
#include "lighting.h"

void main()  {
  const ivec2 screen_pos = ivec2( gl_GlobalInvocationID.xy );
  const vec3 pos = imageLoad( src_image, screen_pos ).xyz;

  // 光源から視点へのベクトルを法線とする平面を求める
  const vec3 eye_to_pos = pos-dynamic_uniforms.eye_pos.xyz;
  const vec3 eye_to_light = dynamic_uniforms.light_pos.xyz-dynamic_uniforms.eye_pos.xyz;
  // その平面上で各ピクセルから光源までの距離を求める
  const float projected_distance_to_pos = dot( eye_to_pos, normalize( eye_to_light ) );
  const float distance_to_light = length( eye_to_light );
  const float r = length( ( eye_to_pos * distance_to_light/projected_distance_to_pos ) - eye_to_light )/dynamic_uniforms.light_size;
  // 光源の光のエネルギーを光源からの距離に反比例するようにぼかす
  const float v =
    ( projected_distance_to_pos < distance_to_light ) ?
    0.0 :
    min( 1.0, 1.0 / ( r * r + 1.0 ) ) * dynamic_uniforms.light_energy;
  imageStore( dest_image, screen_pos, vec4( v, 0.0, 0.0, 1.0 ) );
}

