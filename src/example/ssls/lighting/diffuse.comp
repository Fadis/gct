#version 450

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable

layout (binding = 0, rgba32f) readonly uniform image2DArray gbuffer;
layout (binding = 1, rgba32f) uniform image2D dest_image;

layout(local_size_x = 16, local_size_y = 16 ) in;

#include "constants.h"
#include "push_constants.h"
#include "lighting.h"

void main()  {
  const ivec2 screen_pos = ivec2( gl_GlobalInvocationID.xy );
  vec3 normal = vec3( imageLoad( gbuffer, ivec3( screen_pos, 2 ) ).xy, 0.0 );
  normal.z = sqrt( 1 - normal.x * normal.x - normal.y * normal.y );
  const vec3 pos = imageLoad( gbuffer, ivec3( screen_pos, 0 ) ).xyz;
  const vec2 mr = imageLoad( gbuffer, ivec3( screen_pos, 4 ) ).xy;
  const float roughness = mr.g;
  const float metallicness = mr.r;
  const vec4 albedo = imageLoad( gbuffer, ivec3( screen_pos, 1 ) ).rgba;
  const vec3 emissive = imageLoad( gbuffer, ivec3( screen_pos, 3 ) ).rgb;
  const float shadow_level = imageLoad( gbuffer, ivec3( screen_pos, 6 ) ).r; 
 
  const vec3 N = normal;
  const vec3 V = normalize(dynamic_uniforms.eye_pos.xyz-pos);
  const vec3 L = normalize(dynamic_uniforms.light_pos.xyz-pos);

  imageStore( dest_image, screen_pos, vec4( linear, 1.0 ) );
}

