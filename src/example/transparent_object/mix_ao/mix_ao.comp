#version 450

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable

layout (binding = 0, rgba32f) readonly uniform image2DArray gbuffer;
layout (binding = 1, r32f) readonly uniform image2D occlusion;
layout (binding = 2, rgba32f) readonly uniform image2D diffuse_image;
layout (binding = 3, rgba32f) readonly uniform image2D specular_image;
layout (binding = 4, rgba32f) writeonly uniform image2D dest_image;
layout (binding = 5, rgba32f) writeonly uniform image2D bloom_image;

layout (binding = 8, rgba32f) readonly uniform image2D volumetric_light;
layout (binding = 9, rgba32f) readonly uniform image2D transparent_specular_image;
layout (binding = 10, rgba32f) readonly uniform image2DArray transparent_gbuffer;

#include "push_constants.h"
#include "constants.h"
#include "volumetric.h"

layout (std430, binding = 6) buffer Output {
  uint value;
  float scale;
} tone;

layout(local_size_x = 16, local_size_y = 16 ) in;

void main()  {
  const ivec2 screen_pos = ivec2( gl_GlobalInvocationID.xy );
  const vec4 albedo = imageLoad( gbuffer, ivec3( screen_pos, 1 ) );
  
  const vec3 ambient = dynamic_uniforms.ambient * dynamic_uniforms.light_energy * imageLoad( occlusion, screen_pos ).r * albedo.rgb;
  const vec4 diffuse = imageLoad( diffuse_image, screen_pos );
  const vec3 specular = imageLoad( specular_image, screen_pos ).rgb;
  vec3 total = ambient + diffuse.rgb + specular;
  
  // 不透明な物体の深度
  const float depth = imageLoad( gbuffer, ivec3( screen_pos, 0 ) ).w;
  // 半透明な物体の深度
  const float transparent_depth = imageLoad( transparent_gbuffer, ivec3( screen_pos, 0 ) ).w;
  
  // 半透明な物体の方が手前にあったら
  if( depth > transparent_depth ) {
    // 半透明な物体を通って視点に届く光の計算結果を取り出す
    const vec4 volumetric_light = imageLoad( volumetric_light, screen_pos );
    const vec3 extinction_rate = beer_lambert( push_constants.fog_color.xyz, volumetric_light.a );
    // 不透明な物体の照明の計算結果と混ぜる
    total *= extinction_rate;
    total += volumetric_light.rgb;
    total += imageLoad( transparent_specular_image, screen_pos ).rgb;
  }
  total /= tone.scale;

  const vec3 bloom = max( total - vec3( 1.0, 1.0, 1.0 ), vec3( 0.0, 0.0, 0.0 ) );

  imageStore( dest_image, screen_pos, vec4( total, albedo.a ) );
  imageStore( bloom_image, screen_pos, vec4( bloom, 1.0 ) );
}

