#version 450

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable

layout (binding = 0, rgba32f) readonly uniform image2DArray gbuffer;
layout (binding = 1, rgba32f) writeonly uniform image2D diffuse_image;
layout (binding = 2, rgba32f) writeonly uniform image2D specular_image;

layout(local_size_x = 16, local_size_y = 16 ) in;

#include "constants.h"
#include "push_constants.h"
#include "lighting.h"

void main()  {
  const ivec2 screen_pos = ivec2( gl_GlobalInvocationID.xy );
  vec3 normal = imageLoad( gbuffer, ivec3( screen_pos, 2 ) ).xyz;
  const vec3 pos = imageLoad( gbuffer, ivec3( screen_pos, 0 ) ).xyz;
  const vec2 mr = imageLoad( gbuffer, ivec3( screen_pos, 4 ) ).xy;
  const float roughness = mr.g;
  const float metallicness = mr.r;
  const vec4 albedo = imageLoad( gbuffer, ivec3( screen_pos, 1 ) ).rgba;
  const vec3 emissive = imageLoad( gbuffer, ivec3( screen_pos, 3 ) ).rgb;
  const float shadow_level = imageLoad( gbuffer, ivec3( screen_pos, 6 ) ).r; 
 
  vec3 N = normal;
  const vec3 V = normalize(dynamic_uniforms.eye_pos.xyz-pos);
  const vec3 L = normalize(dynamic_uniforms.light_pos.xyz-pos);

  // 裏側から光が飛んできている時は法線を反転させて照明を計算
  if( dot( L, N ) < 0.0 ) {
    N = -N;
  }

  // 拡散
  vec3 diffuse = diffuse_with_mask(
    L, V, N, albedo.rgb, roughness, metallicness, emissive,
    dynamic_uniforms.light_energy,
    shadow_level
  ) * 0.5;

  // 反射
  vec3 specular = specular_with_mask(
    L, V, normal, albedo.rgb, roughness, metallicness,
    dynamic_uniforms.light_energy,
    shadow_level
  );

  imageStore( diffuse_image, screen_pos, vec4( diffuse, albedo.a ) );
  imageStore( specular_image, screen_pos, vec4( specular, 1.0 ) );
}

