#version 450

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable

#include "constants.h"

layout (binding = 0, rgba32f) readonly uniform image2DArray gbuffer;
layout (binding = 1, rg32f) writeonly uniform image2DArray dest_image;

layout(local_size_x = 256, local_size_y = 1 ) in;

const int kernel_size = 120;
shared vec3[gl_WorkGroupSize.x+kernel_size*2+1] cache;

void main() {
  const ivec2 screen_pos = ivec2( gl_GlobalInvocationID.xy );
  const uint lcpos = gl_LocalInvocationID.x;
  {
    const uint hcpos = lcpos + gl_WorkGroupSize.x;
    const ivec2 image_size = imageSize( gbuffer ).xy;
    ivec2 lsample_pos = screen_pos;
    lsample_pos.x = lsample_pos.x - kernel_size;
    lsample_pos.y = lsample_pos.y;
    ivec2 hsample_pos = lsample_pos;
    hsample_pos.x += int( gl_WorkGroupSize.x );
    lsample_pos.x = max( min( lsample_pos.x, image_size.x ), 0 );
    lsample_pos.y = max( min( lsample_pos.y, image_size.y ), 0 );
    hsample_pos.x = max( min( hsample_pos.x, image_size.x ), 0 );
    hsample_pos.y = max( min( hsample_pos.y, image_size.y ), 0 );
    cache[ lcpos ] = imageLoad( gbuffer, ivec3( lsample_pos, 0 ) ).rgb;
    if( hcpos < gl_WorkGroupSize.x+kernel_size*2+1 ) {
      cache[ hcpos ] = imageLoad( gbuffer, ivec3( hsample_pos, 0 ) ).rgb;
    }
    barrier();
  }
  const vec3 normal = imageLoad( gbuffer, ivec3( screen_pos, 7 ) ).xyz;
  const uint cache_center = lcpos + kernel_size;
  const vec3 center = cache[ cache_center ];
  const vec3 center_pos = cache[ cache_center ];
  float l = 0.0;
  for( uint i = 0; i != kernel_size; i++ ) {
    const vec3 sample_pos = cache[ cache_center - 1 - i ];
    vec3 diff = sample_pos - center_pos;
    if( length( diff ) < 1.0 ) {
      const vec3 tangent = normalize( diff );
      l = max( l, dot( normal, tangent ) );
    }
  }
  float lratio = acos( max( min( l, 1 ), 0 ) )/( pi / 2.0 );

  float r = 0.0;
  for( uint i = 0; i != kernel_size; i++ ) {
    const vec3 sample_pos = cache[ cache_center + 1 + i ];
    vec3 diff = sample_pos - center_pos;
    if( length( diff ) < 1.0 ) {
      const vec3 tangent = normalize( diff );
      r = max( r, dot( normal, tangent ) );
    }
  }
  float rratio = acos( max( min( r, 1 ), 0 ) )/( pi / 2.0 );
  imageStore( dest_image, ivec3( screen_pos, 0 ), vec4( lratio, rratio, 0.0, 0.0 ) );
}

