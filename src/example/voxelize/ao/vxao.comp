#version 450

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_arithmetic : enable

layout (binding = 0, rgba32f) readonly uniform image2DArray gbuffer;
layout (binding = 1, r32f) uniform image2D dest_image;
layout (binding = 2) uniform sampler3D distance_field;

layout(local_size_x = 16, local_size_y = 16 ) in;

#include "constants.h"
#include "poisson_sphere_surface.h"
#include "random.h"
#include "push_constants.h"

mat2 get_rotate_matrix2( float angle ) {
  float s = sin( angle );
  float c = cos( angle );
  return mat2( c, s, -s, c );
}

void main() {
  const float kernel_size = 20.0;
  const ivec2 screen_pos = ivec2( gl_GlobalInvocationID.xy );
  const vec4 center_ = imageLoad( gbuffer, ivec3( screen_pos, 0 ) );
  vec3 normal = imageLoad( gbuffer, ivec3( screen_pos, 2 ) ).xyz;
  const vec3 center = center_.xyz;
  
  const mat3 rot3 = mat3( get_rotate_matrix2( rand1( vec2( screen_pos.xy ) ) * 2 * pi ) );
  
  const ivec3 image_size = imageSize( gbuffer );
  
  float visibility = 0.0;
  for( int i = 0; i < poisson_sphere_surface_sample_count; i++ ) {
    vec3 offset = ( rot3 * poisson_sphere_surface[ i ] ) * kernel_size;
    if( dot( offset, normal ) < 0.0 ) {
      offset = -offset;
    }
    vec3 center_in_voxel_space = ( dynamic_uniforms.voxel * vec4( center, 1.0 ) ).xyz;
    vec3 direction_in_voxel_space = ( dynamic_uniforms.voxel * vec4( center + offset, 1.0 ) ).xyz - center_in_voxel_space;
    for( int j = 0; j < 16; j++ ) {
      float r = texture( distance_field, center_in_voxel_space/**(255.0/256.0)*/ ).r;
      center_in_voxel_space += direction_in_voxel_space * r;
    }
    vec3 hit = ( dynamic_uniforms.inversed_voxel * vec4( center_in_voxel_space, 1.0 ) ).xyz;
    float dist = min( kernel_size, distance( center, hit ) );
    visibility += dist / kernel_size;
  }
  visibility /= poisson_sphere_surface_sample_count;
  imageStore( dest_image, screen_pos, vec4( visibility, 0, 0, 0 ) );
}

