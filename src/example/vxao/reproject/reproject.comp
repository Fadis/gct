#version 450

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable

layout (binding = 0, rgba32f) readonly uniform image2DArray gbuffer;
layout (binding = 1, rgba32f) readonly uniform image2D src_image;
layout (binding = 2, rgba32f) writeonly uniform image2D dest_image;
layout (binding = 3, r32ui) uniform uimage2D depth_image;
layout (binding = 4, r32ui) readonly uniform uimage2D src_history;
layout (binding = 5, r32ui) writeonly uniform uimage2D dest_history;

layout(local_size_x = 16, local_size_y = 16 ) in;

#include "push_constants.h"

void main()  {
  const ivec2 screen_pos = ivec2( gl_GlobalInvocationID.xy );
  vec3 normal = imageLoad( gbuffer, ivec3( screen_pos, 7 ) ).xyz;
  const vec3 pos = imageLoad( gbuffer, ivec3( screen_pos, 0 ) ).xyz;
  const bool visible = dot( normal, dynamic_uniforms.eye_pos.xyz - pos ) > 0.0;
  if( !visible ) {
    return;
  }
  const ivec3 image_size = imageSize( gbuffer );
  const ivec2 image_right_bottom = image_size.xy /*- ivec2( 1, 1 )*/;
  vec4 new_screen_pos = dynamic_uniforms.projection_matrix * dynamic_uniforms.camera_matrix * vec4( pos, 1.0 );
  new_screen_pos /= new_screen_pos.w;
  if( new_screen_pos.x < -1.0 || new_screen_pos.x > 1.0 ) {
    return;
  }
  if( new_screen_pos.y < -1.0 || new_screen_pos.y > 1.0 ) {
    return;
  }
  if( new_screen_pos.z < -1.0 || new_screen_pos.z > 1.0 ) {
    return;
  }
  new_screen_pos.xyz *= 0.5;
  new_screen_pos.xyz += 0.5;
  const ivec3 new_screen_pos_in_integer = ivec3( new_screen_pos.xyz * ivec3( image_right_bottom, 65535 ) );
  vec4 value = imageLoad( src_image, screen_pos );
  //imageStore( dest_image, new_screen_pos_in_integer.xy, value );
  //return;

  uint existing_depth = imageLoad( depth_image, new_screen_pos_in_integer.xy ).r;
  for( uint retry = 0; retry != 4; retry++ ) {
    if( existing_depth > uint( new_screen_pos_in_integer.z ) ) {
      uint result = imageAtomicCompSwap( depth_image, new_screen_pos_in_integer.xy, existing_depth, uint( new_screen_pos_in_integer.z ) );
      if( result == existing_depth ) {
        vec4 value = imageLoad( src_image, screen_pos );
        if( isnan( value.r ) ) return;
        if( isnan( value.g ) ) return;
        if( isnan( value.b ) ) return;
        if( isnan( value.a ) ) return;
        if( isinf( value.r ) ) return;
        if( isinf( value.g ) ) return;
        if( isinf( value.b ) ) return;
        if( isinf( value.a ) ) return;
        imageStore( dest_image, new_screen_pos_in_integer.xy, value );
        uint history = imageLoad( src_history, screen_pos ).r;
        imageStore( dest_history, new_screen_pos_in_integer.xy, uvec4( history, 0, 0, 0 ) );
        return;
      }
      existing_depth = result;
    }
    else {
      return;
    }
  }
}

