#version 460

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable
#extension GL_EXT_nonuniform_qualifier : enable

// メッシュシェーダー拡張を使う
#extension GL_EXT_mesh_shader : enable

// 8bit、16bitの値のバッファを読めるようにする拡張を使う
// 頂点バッファをシェーダーから読むのに使う
#extension GL_EXT_shader_16bit_storage : enable
#extension GL_EXT_shader_8bit_storage : enable

#define GCT_ENABLE_8BIT_16BIT_STORAGE
#include <gct/scene_graph.h>
#include <gct/global_uniforms.h>
#include <gct/scene_graph/accessor.h>
#include <gct/global_uniforms.h>
#include <gct/sphere.h>

// 1つのローカルワークグループには32スレッドが含まれる
layout(local_size_x = 32, local_size_y = 1 ) in;

// 1つのローカルワークグループから最大で32頂点32プリミティブの三角形を出力する
layout(triangles, max_vertices = 63, max_primitives = 80) out;

// タスクペイロード
struct task_data {
  // どのノードの下のどのメッシュを描くかを指定するID
  uint resource_pair_id;
  // ローカル座標系からワールド座標系への変換行列
  mat4 l2w;
  // ワールド座標系からスクリーン座標系への変換行列
  mat4 w2s;
};
taskPayloadSharedEXT task_data td;

layout (location = 0) out float output_radius[]; // 半径

void main() {
  // 描画対象のID
  const resource_pair_type id = resource_pair[ push_constants.instance + td.resource_pair_id ];
  // メッシュの情報を取得する
  const primitive_resource_index_type prim = primitive_resource_index[ id.prim ];
  const mesh_type mesh = mesh_pool[ prim.mesh ];

  // 変換行列をタスクペイロードから取り出す
  const mat4 l2w = td.l2w;
  const mat4 w2s = td.w2s;

  SetMeshOutputsEXT( sphere_vertex_count, sphere_index_count );

  const float radius = 0.1;
  const vec4 wp0 =
    l2w *
    read_vertex( accessor_pool[ mesh.accessor + 1 ], gl_WorkGroupID.x, vec4( 0.0, 0.0, 0.0, 1.0 ) );

  for( uint i = 0u; i + gl_LocalInvocationID.x < sphere_vertex_count; i += gl_WorkGroupSize.x ) {
    gl_MeshVerticesEXT[ i + gl_LocalInvocationID.x ].gl_Position =
      w2s * vec4( wp0.xyz + sphere_vertex[ i + gl_LocalInvocationID.x ] * radius, 1.0 );
  }

  for( uint i = 0u; i + gl_LocalInvocationID.x < sphere_index_count; i += gl_WorkGroupSize.x ) {
    gl_PrimitiveTriangleIndicesEXT[ i + gl_LocalInvocationID.x ] =
      sphere_index[ i + gl_LocalInvocationID.x ];
  }
}

