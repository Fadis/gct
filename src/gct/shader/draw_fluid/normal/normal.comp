#version 460

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_shader_image_load_formatted : enable

#define GCT_USE_IMAGE_POOL_WITHOUT_FORMAT

layout(local_size_x = 16, local_size_y = 16 ) in;

#include <gct/global_uniforms.h>
#include <gct/constants.h>
#include <gct/scene_graph/matrix_pool.h>
#include <gct/scene_graph/image_pool.h>
#include <gct/depth.h>

layout(push_constant) uniform PushConstants {
  uint src;
  uint dest;
  uint unproject;
} push_constants;

//layout (set = 1, binding = 20) uniform image2D hoge;

layout (std430, binding = 13) buffer AFState {
  uint history;
  uint max_history;
  float depth;
  float znear;
  float zfar;
  float focal_distance;
  float lens_size;
  float sensor_size;
  float apeture_rotation;
  float visible_range;
} af_state;

void main() {
  const ivec2 screen_pos = ivec2( gl_GlobalInvocationID.xy );
  const uvec2 image_size = imageSize( image_pool_2d[ nonuniformEXT( push_constants.dest ) ] ).xy;

  const vec3 x = normalize(
    depth_to_world_position(
      screen_pos + ivec2( -1, 0 ),
      image_size,
      encode_depth(
        imageLoad( image_pool_2d[ nonuniformEXT( push_constants.src ) ], screen_pos + ivec2( 1, 0 ) ).x,
        af_state.znear, af_state.zfar
      ),
      matrix_pool[ push_constants.unproject ]
    ).xyz -
    depth_to_world_position(
      screen_pos + ivec2( 1, 0 ),
      image_size,
      encode_depth(
        imageLoad( image_pool_2d[ nonuniformEXT( push_constants.src ) ], screen_pos + ivec2( -1, 0 ) ).x,
        af_state.znear, af_state.zfar
      ),
      matrix_pool[ push_constants.unproject ]
    ).xyz
  );
  const vec3 y = normalize(
    depth_to_world_position(
      screen_pos + ivec2( 0, 1 ),
      image_size,
      encode_depth(
        imageLoad( image_pool_2d[ nonuniformEXT( push_constants.src ) ], screen_pos + ivec2( 0, 1 ) ).x,
        af_state.znear, af_state.zfar
      ),
      matrix_pool[ push_constants.unproject ]
    ).xyz -
    depth_to_world_position(
      screen_pos + ivec2( 0, -1 ),
      image_size,
      encode_depth(
        imageLoad( image_pool_2d[ nonuniformEXT( push_constants.src ) ], screen_pos + ivec2( 0, -1 ) ).x,
        af_state.znear, af_state.zfar
      ),
      matrix_pool[ push_constants.unproject ]
    ).xyz
  );
  const vec3 n = cross( x, y );
    
  const vec3 p =
    depth_to_world_position(
      screen_pos,
      image_size,
      imageLoad( image_pool_2d[ nonuniformEXT( push_constants.src ) ], screen_pos ).x,
      matrix_pool[ push_constants.unproject ]
    ).xyz;
  const float diffuse = max( dot( n, normalize( vec3( 0, 100, -50 ) - p ) ), 0.0 );

  //imageStore( image_pool_2d[ nonuniformEXT( push_constants.dest ) ], screen_pos, vec4( n * 0.5 + 0.5, 1.0 ) );
  imageStore( image_pool_2d[ nonuniformEXT( push_constants.dest ) ], screen_pos, vec4( diffuse, diffuse, diffuse, 1.0 ) );
}

