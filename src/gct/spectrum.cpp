#include <array>
#include <gct/spectrum.hpp>

namespace gct {

const std::map< unsigned int, glm::vec3 > spectrum {
  { 390, glm::vec3( 1.5000e-03,-4.0000e-04,6.2000e-03) },
  { 395, glm::vec3( 3.8000e-03,-1.0000e-03,1.6100e-02) },
  { 400, glm::vec3( 8.9000e-03,-2.5000e-03,4.0000e-02) },
  { 405, glm::vec3( 1.8800e-02,-5.9000e-03,9.0600e-02) },
  { 410, glm::vec3( 3.5000e-02,-1.1900e-02,1.8020e-01) },
  { 415, glm::vec3( 5.3100e-02,-2.0100e-02,3.0880e-01) },
  { 420, glm::vec3( 7.0200e-02,-2.8900e-02,4.6700e-01) },
  { 425, glm::vec3( 7.6300e-02,-3.3800e-02,6.1520e-01) },
  { 430, glm::vec3( 7.4500e-02,-3.4900e-02,7.6380e-01) },
  { 435, glm::vec3( 5.6100e-02,-2.7600e-02,8.7780e-01) },
  { 440, glm::vec3( 3.2300e-02,-1.6900e-02,9.7550e-01) },
  { 445, glm::vec3( -4.4000e-03,2.4000e-03,1.0019e+00) },
  { 450, glm::vec3( -4.7800e-02,2.8300e-02,9.9960e-01) },
  { 455, glm::vec3( -9.7000e-02,6.3600e-02,9.1390e-01) },
  { 460, glm::vec3( -1.5860e-01,1.0820e-01,8.2970e-01) },
  { 465, glm::vec3( -2.2350e-01,1.6170e-01,7.4170e-01) },
  { 470, glm::vec3( -2.8480e-01,2.2010e-01,6.1340e-01) },
  { 475, glm::vec3( -3.3460e-01,2.7960e-01,4.7200e-01) },
  { 480, glm::vec3( -3.7760e-01,3.4280e-01,3.4950e-01) },
  { 485, glm::vec3( -4.1360e-01,4.0860e-01,2.5640e-01) },
  { 490, glm::vec3( -4.3170e-01,4.7160e-01,1.8190e-01) },
  { 495, glm::vec3( -4.4520e-01,5.4910e-01,1.3070e-01) },
  { 500, glm::vec3( -4.3500e-01,6.2600e-01,9.1000e-02) },
  { 505, glm::vec3( -4.1400e-01,7.0970e-01,5.8000e-02) },
  { 510, glm::vec3( -3.6730e-01,7.9350e-01,3.5700e-02) },
  { 515, glm::vec3( -2.8450e-01,8.7150e-01,2.0000e-02) },
  { 520, glm::vec3( -1.8550e-01,9.4770e-01,9.5000e-03) },
  { 525, glm::vec3( -4.3500e-02,9.9450e-01,7.0000e-04) },
  { 530, glm::vec3( 1.2700e-01,1.0203e+00,-4.3000e-03) },
  { 535, glm::vec3( 3.1290e-01,1.0375e+00,-6.4000e-03) },
  { 540, glm::vec3( 5.3620e-01,1.0517e+00,-8.2000e-03) },
  { 545, glm::vec3( 7.7220e-01,1.0390e+00,-9.4000e-03) },
  { 550, glm::vec3( 1.0059e+00,1.0029e+00,-9.7000e-03) },
  { 555, glm::vec3( 1.2710e+00,9.6980e-01,-9.7000e-03) },
  { 560, glm::vec3( 1.5574e+00,9.1620e-01,-9.3000e-03) },
  { 565, glm::vec3( 1.8465e+00,8.5710e-01,-8.7000e-03) },
  { 570, glm::vec3( 2.1511e+00,7.8230e-01,-8.0000e-03) },
  { 575, glm::vec3( 2.4250e+00,6.9530e-01,-7.3000e-03) },
  { 580, glm::vec3( 2.6574e+00,5.9660e-01,-6.3000e-03) },
  { 585, glm::vec3( 2.9151e+00,5.0630e-01,-5.3700e-03) },
  { 590, glm::vec3( 3.0779e+00,4.2030e-01,-4.4500e-03) },
  { 595, glm::vec3( 3.1613e+00,3.3600e-01,-3.5700e-03) },
  { 600, glm::vec3( 3.1673e+00,2.5910e-01,-2.7700e-03) },
  { 605, glm::vec3( 3.1048e+00,1.9170e-01,-2.0800e-03) },
  { 610, glm::vec3( 2.9462e+00,1.3670e-01,-1.5000e-03) },
  { 615, glm::vec3( 2.7194e+00,9.3800e-02,-1.0300e-03) },
  { 620, glm::vec3( 2.4526e+00,6.1100e-02,-6.8000e-04) },
  { 625, glm::vec3( 2.1700e+00,3.7100e-02,-4.4200e-04) },
  { 630, glm::vec3( 1.8358e+00,2.1500e-02,-2.7200e-04) },
  { 635, glm::vec3( 1.5179e+00,1.1200e-02,-1.4100e-04) },
  { 640, glm::vec3( 1.2428e+00,4.4000e-03,-5.4900e-05) },
  { 645, glm::vec3( 1.0070e+00,7.8000e-05,-2.2000e-06) },
  { 650, glm::vec3( 7.8270e-01,-1.3680e-03,2.3700e-05) },
  { 655, glm::vec3( 5.9340e-01,-1.9880e-03,2.8600e-05) },
  { 660, glm::vec3( 4.4420e-01,-2.1680e-03,2.6100e-05) },
  { 665, glm::vec3( 3.2830e-01,-2.0060e-03,2.2500e-05) },
  { 670, glm::vec3( 2.3940e-01,-1.6420e-03,1.8200e-05) },
  { 675, glm::vec3( 1.7220e-01,-1.2720e-03,1.3900e-05) },
  { 680, glm::vec3( 1.2210e-01,-9.4700e-04,1.0300e-05) },
  { 685, glm::vec3( 8.5300e-02,-6.8300e-04,7.3800e-06) },
  { 690, glm::vec3( 5.8600e-02,-4.7800e-04,5.2200e-06) },
  { 695, glm::vec3( 4.0800e-02,-3.3700e-04,3.6700e-06) },
  { 700, glm::vec3( 2.8400e-02,-2.3500e-04,2.5600e-06) },
  { 705, glm::vec3( 1.9700e-02,-1.6300e-04,1.7600e-06) },
  { 710, glm::vec3( 1.3500e-02,-1.1100e-04,1.2000e-06) },
  { 715, glm::vec3( 9.2400e-03,-7.4800e-05,8.1700e-07) },
  { 720, glm::vec3( 6.3800e-03,-5.0800e-05,5.5500e-07) },
  { 725, glm::vec3( 4.4100e-03,-3.4400e-05,3.7500e-07) },
  { 730, glm::vec3( 3.0700e-03,-2.3400e-05,2.5400e-07) },
  { 735, glm::vec3( 2.1400e-03,-1.5900e-05,1.7100e-07) },
  { 740, glm::vec3( 1.4900e-03,-1.0700e-05,1.1600e-07) },
  { 745, glm::vec3( 1.0500e-03,-7.2300e-06,7.8500e-08) },
  { 750, glm::vec3( 7.3900e-04,-4.8700e-06,5.3100e-08) },
  { 755, glm::vec3( 5.2300e-04,-3.2900e-06,3.6000e-08) },
  { 760, glm::vec3( 3.7200e-04,-2.2200e-06,2.4400e-08) },
  { 765, glm::vec3( 2.6500e-04,-1.5000e-06,1.6500e-08) },
  { 770, glm::vec3( 1.9000e-04,-1.0200e-06,1.1200e-08) },
  { 775, glm::vec3( 1.3600e-04,-6.8800e-07,7.5300e-09) },
  { 780, glm::vec3( 9.8400e-05,-4.6500e-07,5.0700e-09) },
  { 785, glm::vec3( 7.1300e-05,-3.1200e-07,3.4000e-09) },
  { 790, glm::vec3( 5.1800e-05,-2.0800e-07,2.2700e-09) },
  { 795, glm::vec3( 3.7700e-05,-1.3700e-07,1.5000e-09) },
  { 800, glm::vec3( 2.7600e-05,-8.8000e-08,9.8600e-10) },
  { 805, glm::vec3( 2.0300e-05,-5.5300e-08,6.3900e-10) },
  { 810, glm::vec3( 1.4900e-05,-3.3600e-08,4.0700e-10) },
  { 815, glm::vec3( 1.1000e-05,-1.9600e-08,2.5300e-10) },
  { 820, glm::vec3( 8.1800e-06,-1.0900e-08,1.5200e-10) },
  { 825, glm::vec3( 6.0900e-06,-5.7000e-09,8.6400e-11) },
  { 830, glm::vec3( 4.5500e-06,-2.7700e-09,4.4200e-11) }
};
glm::vec3 wavelength_to_color( float w ) {
  unsigned int wi = w;
  if( wi <= 390 ) {
    return spectrum.begin()->second;
  }
  if( wi >= 830 ) {
    return std::prev( spectrum.end() )->second;
  }
  const auto nearest = spectrum.lower_bound( wi );
  auto next = std::next( nearest );
  const float ltop = w - nearest->first;
  const float ltor = next->first - nearest->first;
  const float relative_pos = ltop / ltor;
  const glm::vec3 tangent = next->second - nearest->second;
  return nearest->second + tangent * relative_pos;
}

std::array< glm::vec3, 10u > color_map_palette{
  glm::vec3( 0xff / 255.f, 0xff / 255.f, 0xff / 255.f ),
  glm::vec3( 0x00 / 255.f, 0x00 / 255.f, 0x90 / 255.f ),
  glm::vec3( 0x00 / 255.f, 0x0f / 255.f, 0xff / 255.f ),
  glm::vec3( 0x00 / 255.f, 0x90 / 255.f, 0xff / 255.f ),
  glm::vec3( 0x0f / 255.f, 0xff / 255.f, 0xee / 255.f ),
  glm::vec3( 0x90 / 255.f, 0xff / 255.f, 0x70 / 255.f ),
  glm::vec3( 0xff / 255.f, 0xee / 255.f, 0x00 / 255.f ),
  glm::vec3( 0xff / 255.f, 0x70 / 255.f, 0x00 / 255.f ),
  glm::vec3( 0xee / 255.f, 0x00 / 255.f, 0x00 / 255.f ),
  glm::vec3( 0x7f / 255.f, 0x00 / 255.f, 0x00 / 255.f )
};
glm::vec3 interpolate_color_map( float value ) {
  const auto clamped = std::min( std::max( value * 9.f, 0.f ), 9.f );
  const auto i = std::uint32_t( clamped );
  const auto p = clamped - i;
  if( i == 9u ) return color_map_palette[ 9 ];
  const auto l = color_map_palette[ i ];
  const auto h = color_map_palette[ i + 1 ];
  return ( h - l ) * p + l;
}

glm::vec3 level_to_color( double value, double min, double max ) {
  return interpolate_color_map( ( value - min )/( max - min ) );
}

}

